<?xml version="1.0" encoding="utf-8"?>
<p:Activity1 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:local="clr-namespace:FlagCollectorWorkflowActivities;assembly=ProtocoloSimple" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:p="clr-namespace:ProtocoloSimple;assembly=ProtocoloSimple" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sd="clr-namespace:System.Drawing;assembly=System.Drawing" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Drawing</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>ProtocoloSimple</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <p:Activity1.Implementation>
    <StateMachine>
      <StateMachine.InitialState>
        <State x:Name="__ReferenceID11" DisplayName="Iniciar Variables">
          <State.Entry>
            <Sequence>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">Cercania</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">1</InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="scg:List(x:String)">
                    <mca:CSharpReference x:TypeArguments="scg:List(x:String)">Archivo</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="scg:List(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:List(x:String)">new List&lt;string&gt;();</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">NroPrueba</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">0</InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">IBanderaPar</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">0</InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="s:Int32[]">
                    <mca:CSharpReference x:TypeArguments="s:Int32[]">BanderasExperimento</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="s:Int32[]">
                    <mca:CSharpValue x:TypeArguments="s:Int32[]">new int[2]</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="s:Boolean[]">
                    <mca:CSharpReference x:TypeArguments="s:Boolean[]">BanderasVisibles</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="s:Boolean[]">
                    <mca:CSharpValue x:TypeArguments="s:Boolean[]">new bool[2]</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
          </State.Entry>
          <State.Transitions>
            <Transition DisplayName="Inició Cave">
              <Transition.Trigger>
                <Sequence>
                  <local:ReadString BookmarkName="RtaCave">
                    <local:ReadString.Result>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                      </OutArgument>
                    </local:ReadString.Result>
                  </local:ReadString>
                </Sequence>
              </Transition.Trigger>
              <Transition.To>
                <State x:Name="__ReferenceID6" DisplayName="Detenido">
                  <State.Exit>
                    <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                      <AddToCollection.Item>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString()+";"+Coordenadas.X+";"+Coordenadas.Y+";NULL;NULL;NULL;DET"</mca:CSharpValue>
                        </InArgument>
                      </AddToCollection.Item>
                      <InArgument x:TypeArguments="scg:ICollection(x:String)">
                        <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                      </InArgument>
                    </AddToCollection>
                  </State.Exit>
                  <State.Transitions>
                    <Transition DisplayName="Mostrar banderas">
                      <Transition.Trigger>
                        <Sequence DisplayName="Recibir Coordenadas">
                          <local:ReadString BookmarkName="RtaCave">
                            <local:ReadString.Result>
                              <OutArgument x:TypeArguments="x:String">
                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                              </OutArgument>
                            </local:ReadString.Result>
                          </local:ReadString>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="sd:PointF">
                                <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="sd:PointF">
                                <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                        </Sequence>
                      </Transition.Trigger>
                      <Transition.To>
                        <State x:Name="__ReferenceID0" DisplayName="Buscando Bandera">
                          <State.Exit>
                            <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                              <AddToCollection.Item>
                                <InArgument x:TypeArguments="x:String">
                                  <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString()+";"+Coordenadas.X+";"+Coordenadas.Y+";"+"NULL;NULL;NULL;BUS"</mca:CSharpValue>
                                </InArgument>
                              </AddToCollection.Item>
                              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                              </InArgument>
                            </AddToCollection>
                          </State.Exit>
                          <State.Transitions>
                            <Transition DisplayName="">
                              <Transition.Trigger>
                                <Sequence x:Name="__ReferenceID1" DisplayName="Recibir Coordenadas">
                                  <local:ReadString BookmarkName="RtaCave">
                                    <local:ReadString.Result>
                                      <OutArgument x:TypeArguments="x:String">
                                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                      </OutArgument>
                                    </local:ReadString.Result>
                                  </local:ReadString>
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="sd:PointF">
                                        <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="sd:PointF">
                                        <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </Transition.Trigger>
                              <Transition.To>
                                <x:Reference>__ReferenceID0</x:Reference>
                              </Transition.To>
                              <Transition.Condition>
                                <mca:CSharpValue x:TypeArguments="x:Boolean">!((((Math.Pow(BanderasCircunferencia[BanderasExperimento[0]].X - Coordenadas.X, 2) + Math.Pow(BanderasCircunferencia[BanderasExperimento[0]].Y - Coordenadas.Y, 2)) &lt; Cercania) &amp;&amp; (BanderasVisibles[0])) || (((Math.Pow(BanderasCircunferencia[BanderasExperimento[1]].X - Coordenadas.X, 2) + Math.Pow(BanderasCircunferencia[BanderasExperimento[1]].Y - Coordenadas.Y, 2)) &lt; Cercania) &amp;&amp; (BanderasVisibles[1])))</mca:CSharpValue>
                              </Transition.Condition>
                            </Transition>
                            <Transition Trigger="{x:Reference __ReferenceID1}" DisplayName="Recolecto">
                              <Transition.To>
                                <State x:Name="__ReferenceID2" DisplayName="Vuelve al centro">
                                  <State.Exit>
                                    <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                      <AddToCollection.Item>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString()+";"+Coordenadas.X+";"+Coordenadas.Y+";"+"NULL;NULL;NULL;CEN"</mca:CSharpValue>
                                        </InArgument>
                                      </AddToCollection.Item>
                                      <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                        <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                      </InArgument>
                                    </AddToCollection>
                                  </State.Exit>
                                  <State.Transitions>
                                    <Transition DisplayName="">
                                      <Transition.Trigger>
                                        <Sequence x:Name="__ReferenceID3" DisplayName="Recibir Coordenadas">
                                          <local:ReadString BookmarkName="RtaCave">
                                            <local:ReadString.Result>
                                              <OutArgument x:TypeArguments="x:String">
                                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                              </OutArgument>
                                            </local:ReadString.Result>
                                          </local:ReadString>
                                          <Assign>
                                            <Assign.To>
                                              <OutArgument x:TypeArguments="sd:PointF">
                                                <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                              </OutArgument>
                                            </Assign.To>
                                            <Assign.Value>
                                              <InArgument x:TypeArguments="sd:PointF">
                                                <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                              </InArgument>
                                            </Assign.Value>
                                          </Assign>
                                        </Sequence>
                                      </Transition.Trigger>
                                      <Transition.To>
                                        <x:Reference>__ReferenceID2</x:Reference>
                                      </Transition.To>
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">!((Math.Pow(Coordenadas.X, 2) + Math.Pow(Coordenadas.Y, 2)) &lt; Cercania)</mca:CSharpValue>
                                      </Transition.Condition>
                                    </Transition>
                                    <Transition Trigger="{x:Reference __ReferenceID3}" DisplayName="Paso por el centro" To="{x:Reference __ReferenceID0}">
                                      <Transition.Action>
                                        <WriteLine Text="Centro" />
                                      </Transition.Action>
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean" xml:space="preserve">((Math.Pow(Coordenadas.X, 2) + Math.Pow(Coordenadas.Y, 2)) &lt; Cercania)  &amp;&amp; (NroPrueba &lt; Angulo.Length) &amp;&amp; (IBanderaPar &lt; 2)</mca:CSharpValue>
                                      </Transition.Condition>
                                    </Transition>
                                    <Transition Trigger="{x:Reference __ReferenceID3}" DisplayName="TerminarExperimento">
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">((Math.Pow(Coordenadas.X, 2) + Math.Pow(Coordenadas.Y, 2)) &lt; Cercania) &amp;&amp; (TestMemoria.Equals("N")) &amp;&amp; (IBanderaPar==2)</mca:CSharpValue>
                                      </Transition.Condition>
                                      <Transition.To>
                                        <State x:Name="__ReferenceID8" DisplayName="FinalState" IsFinal="True">
                                          <State.Entry>
                                            <Sequence>
                                              <WriteLine>
                                                <InArgument x:TypeArguments="x:String">
                                                  <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Fin del experimento\" }"</mca:CSharpValue>
                                                </InArgument>
                                              </WriteLine>
                                              <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                <AddToCollection.Item>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString()+";"+Coordenadas.X+";"+Coordenadas.Y+";"+"NULL;NULL;NULL;FIN"</mca:CSharpValue>
                                                  </InArgument>
                                                </AddToCollection.Item>
                                                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                </InArgument>
                                              </AddToCollection>
                                              <Delay>
                                                <InArgument x:TypeArguments="x:TimeSpan">
                                                  <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(5)</mca:CSharpValue>
                                                </InArgument>
                                              </Delay>
                                              <WriteLine Text="hide_question" />
                                            </Sequence>
                                          </State.Entry>
                                        </State>
                                      </Transition.To>
                                    </Transition>
                                    <Transition Trigger="{x:Reference __ReferenceID3}" DisplayName="Termino de recolectar">
                                      <Transition.To>
                                        <State x:Name="__ReferenceID4" DisplayName="Eligiendo bandera">
                                          <State.Entry>
                                            <If>
                                              <If.Condition>
                                                <InArgument x:TypeArguments="x:Boolean">
                                                  <mca:CSharpValue x:TypeArguments="x:Boolean">NroProtocolo.Equals(2)</mca:CSharpValue>
                                                </InArgument>
                                              </If.Condition>
                                              <If.Then>
                                                <Sequence>
                                                  <WriteLine>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"" + ColorSeleccion + "\" }"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                </Sequence>
                                              </If.Then>
                                            </If>
                                          </State.Entry>
                                          <State.Transitions>
                                            <Transition DisplayName="No eligio">
                                              <Transition.Trigger>
                                                <Sequence x:Name="__ReferenceID5">
                                                  <local:ReadString BookmarkName="RtaCave">
                                                    <local:ReadString.Result>
                                                      <OutArgument x:TypeArguments="x:String">
                                                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                      </OutArgument>
                                                    </local:ReadString.Result>
                                                  </local:ReadString>
                                                </Sequence>
                                              </Transition.Trigger>
                                              <Transition.To>
                                                <x:Reference>__ReferenceID4</x:Reference>
                                              </Transition.To>
                                              <Transition.Action>
                                                <If>
                                                  <If.Condition>
                                                    <InArgument x:TypeArguments="x:Boolean">
                                                      <mca:CSharpValue x:TypeArguments="x:Boolean">NroProtocolo==2</mca:CSharpValue>
                                                    </InArgument>
                                                  </If.Condition>
                                                  <If.Then>
                                                    <Sequence>
                                                      <WriteLine>
                                                        <InArgument x:TypeArguments="x:String">
                                                          <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"" + ColorBandera + "\" }"</mca:CSharpValue>
                                                        </InArgument>
                                                      </WriteLine>
                                                      <If>
                                                        <If.Condition>
                                                          <InArgument x:TypeArguments="x:Boolean">
                                                            <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("1")</mca:CSharpValue>
                                                          </InArgument>
                                                        </If.Condition>
                                                        <If.Then>
                                                          <Sequence>
                                                            <Assign>
                                                              <Assign.To>
                                                                <OutArgument x:TypeArguments="x:Int32">
                                                                  <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                                </OutArgument>
                                                              </Assign.To>
                                                              <Assign.Value>
                                                                <InArgument x:TypeArguments="x:Int32">
                                                                  <mca:CSharpValue x:TypeArguments="x:Int32">(Cursor - 1) % BanderasCircunferencia.Count</mca:CSharpValue>
                                                                </InArgument>
                                                              </Assign.Value>
                                                            </Assign>
                                                            <If>
                                                              <If.Condition>
                                                                <InArgument x:TypeArguments="x:Boolean">
                                                                  <mca:CSharpValue x:TypeArguments="x:Boolean">Cursor&lt;0</mca:CSharpValue>
                                                                </InArgument>
                                                              </If.Condition>
                                                              <If.Then>
                                                                <Assign>
                                                                  <Assign.To>
                                                                    <OutArgument x:TypeArguments="x:Int32">
                                                                      <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                                    </OutArgument>
                                                                  </Assign.To>
                                                                  <Assign.Value>
                                                                    <InArgument x:TypeArguments="x:Int32">
                                                                      <mca:CSharpValue x:TypeArguments="x:Int32">BanderasCircunferencia.Count-1</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </Assign.Value>
                                                                </Assign>
                                                              </If.Then>
                                                            </If>
                                                          </Sequence>
                                                        </If.Then>
                                                        <If.Else>
                                                          <Assign>
                                                            <Assign.To>
                                                              <OutArgument x:TypeArguments="x:Int32">
                                                                <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                              </OutArgument>
                                                            </Assign.To>
                                                            <Assign.Value>
                                                              <InArgument x:TypeArguments="x:Int32">
                                                                <mca:CSharpValue x:TypeArguments="x:Int32">(Cursor + 1) % BanderasCircunferencia.Count</mca:CSharpValue>
                                                              </InArgument>
                                                            </Assign.Value>
                                                          </Assign>
                                                        </If.Else>
                                                      </If>
                                                    </Sequence>
                                                  </If.Then>
                                                </If>
                                              </Transition.Action>
                                              <Transition.Condition>
                                                <mca:CSharpValue x:TypeArguments="x:Boolean">(RtaCave.Equals("1") &amp;&amp; (NroProtocolo == 2)) || RtaCave.Equals("3")</mca:CSharpValue>
                                              </Transition.Condition>
                                            </Transition>
                                            <Transition Trigger="{x:Reference __ReferenceID5}" DisplayName="Selección">
                                              <Transition.Condition>
                                                <mca:CSharpValue x:TypeArguments="x:Boolean">(RtaCave.Equals("2") || ((RtaCave.Equals("1") &amp;&amp; NroProtocolo == 1)))</mca:CSharpValue>
                                              </Transition.Condition>
                                              <Transition.To>
                                                <State x:Name="__ReferenceID12" DisplayName="Eligió Bandera">
                                                  <State.Entry>
                                                    <Sequence>
                                                      <WriteLine Text="hide_question" />
                                                      <If>
                                                        <If.Condition>
                                                          <InArgument x:TypeArguments="x:Boolean">
                                                            <mca:CSharpValue x:TypeArguments="x:Boolean">NroProtocolo==1</mca:CSharpValue>
                                                          </InArgument>
                                                        </If.Condition>
                                                        <If.Then>
                                                          <If>
                                                            <If.Condition>
                                                              <InArgument x:TypeArguments="x:Boolean">
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">Protocolo_P1[NroPrueba-1]==1</mca:CSharpValue>
                                                              </InArgument>
                                                            </If.Condition>
                                                            <If.Then>
                                                              <Sequence>
                                                                <WriteLine>
                                                                  <InArgument x:TypeArguments="x:String">
                                                                    <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(BanderasExperimento[0]) + "\", \"visible\":\"false\" }"</mca:CSharpValue>
                                                                  </InArgument>
                                                                </WriteLine>
                                                                <If>
                                                                  <If.Condition>
                                                                    <InArgument x:TypeArguments="x:Boolean">
                                                                      <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("1")</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </If.Condition>
                                                                  <If.Then>
                                                                    <Sequence>
                                                                      <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                                        <AddToCollection.Item>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";NULL;NULL;NO;SEL"</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </AddToCollection.Item>
                                                                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </AddToCollection>
                                                                    </Sequence>
                                                                  </If.Then>
                                                                  <If.Else>
                                                                    <Sequence>
                                                                      <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                                        <AddToCollection.Item>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString()+";"+Coordenadas.X+";"+Coordenadas.Y+";NULL;NULL;OK;SEL"</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </AddToCollection.Item>
                                                                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </AddToCollection>
                                                                    </Sequence>
                                                                  </If.Else>
                                                                </If>
                                                              </Sequence>
                                                            </If.Then>
                                                            <If.Else>
                                                              <Sequence>
                                                                <WriteLine>
                                                                  <InArgument x:TypeArguments="x:String">
                                                                    <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(medio) + "\", \"visible\":\"false\" }"</mca:CSharpValue>
                                                                  </InArgument>
                                                                </WriteLine>
                                                                <If>
                                                                  <If.Condition>
                                                                    <InArgument x:TypeArguments="x:Boolean">
                                                                      <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("2")</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </If.Condition>
                                                                  <If.Then>
                                                                    <Sequence>
                                                                      <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                                        <AddToCollection.Item>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString()+";"+Coordenadas.X+";"+Coordenadas.Y+";NULL;NULL;OK;SEL"</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </AddToCollection.Item>
                                                                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </AddToCollection>
                                                                    </Sequence>
                                                                  </If.Then>
                                                                  <If.Else>
                                                                    <Sequence>
                                                                      <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                                        <AddToCollection.Item>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString()+";"+Coordenadas.X+";"+Coordenadas.Y+";NULL;NULL;NO;SEL"</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </AddToCollection.Item>
                                                                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </AddToCollection>
                                                                    </Sequence>
                                                                  </If.Else>
                                                                </If>
                                                              </Sequence>
                                                            </If.Else>
                                                          </If>
                                                        </If.Then>
                                                        <If.Else>
                                                          <Sequence>
                                                            <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                              <AddToCollection.Item>
                                                                <InArgument x:TypeArguments="x:String">
                                                                  <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + BanderasCircunferencia.ElementAt(Cursor).X + ";" + BanderasCircunferencia.ElementAt(Cursor).Y + ";" + Cursor + ";SEL"</mca:CSharpValue>
                                                                </InArgument>
                                                              </AddToCollection.Item>
                                                              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                              </InArgument>
                                                            </AddToCollection>
                                                            <WriteLine>
                                                              <InArgument x:TypeArguments="x:String">
                                                                <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"" + ColorBandera + "\" }"</mca:CSharpValue>
                                                              </InArgument>
                                                            </WriteLine>
                                                            <WriteLine>
                                                              <InArgument x:TypeArguments="x:String">
                                                                <mca:CSharpValue x:TypeArguments="x:String">Mostrar180.Replace("true", "false")</mca:CSharpValue>
                                                              </InArgument>
                                                            </WriteLine>
                                                          </Sequence>
                                                        </If.Else>
                                                      </If>
                                                    </Sequence>
                                                  </State.Entry>
                                                  <State.Transitions>
                                                    <Transition DisplayName="Proximo par">
                                                      <Transition.Trigger>
                                                        <Sequence x:Name="__ReferenceID7">
                                                          <local:ReadString BookmarkName="RtaCave">
                                                            <local:ReadString.Result>
                                                              <OutArgument x:TypeArguments="x:String">
                                                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                              </OutArgument>
                                                            </local:ReadString.Result>
                                                          </local:ReadString>
                                                          <Assign>
                                                            <Assign.To>
                                                              <OutArgument x:TypeArguments="sd:PointF">
                                                                <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                              </OutArgument>
                                                            </Assign.To>
                                                            <Assign.Value>
                                                              <InArgument x:TypeArguments="sd:PointF">
                                                                <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                              </InArgument>
                                                            </Assign.Value>
                                                          </Assign>
                                                        </Sequence>
                                                      </Transition.Trigger>
                                                      <Transition.To>
                                                        <x:Reference>__ReferenceID6</x:Reference>
                                                      </Transition.To>
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">(Preguntar.Equals("N")) &amp;&amp; (Angulo.Length &gt; NroPrueba)</mca:CSharpValue>
                                                      </Transition.Condition>
                                                    </Transition>
                                                    <Transition Trigger="{x:Reference __ReferenceID7}" DisplayName="Hacer Autoevaluación">
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">Preguntar.Equals("S")</mca:CSharpValue>
                                                      </Transition.Condition>
                                                      <Transition.To>
                                                        <State x:Name="__ReferenceID10" DisplayName="Autoevaluacion">
                                                          <State.Entry>
                                                            <WriteLine>
                                                              <InArgument x:TypeArguments="x:String">
                                                                <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Como crees que te fue en la tarea?\" }"</mca:CSharpValue>
                                                              </InArgument>
                                                            </WriteLine>
                                                          </State.Entry>
                                                          <State.Exit>
                                                            <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                              <AddToCollection.Item>
                                                                <InArgument x:TypeArguments="x:String">
                                                                  <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString()+";"+Coordenadas.X+";"+Coordenadas.Y+";NULL;NULL;NULL;RES"</mca:CSharpValue>
                                                                </InArgument>
                                                              </AddToCollection.Item>
                                                              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                              </InArgument>
                                                            </AddToCollection>
                                                          </State.Exit>
                                                          <State.Transitions>
                                                            <Transition DisplayName="TerminarExperimento">
                                                              <Transition.Trigger>
                                                                <local:ReadString x:Name="__ReferenceID9" BookmarkName="RtaCave">
                                                                  <local:ReadString.Result>
                                                                    <OutArgument x:TypeArguments="x:String">
                                                                      <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                                    </OutArgument>
                                                                  </local:ReadString.Result>
                                                                </local:ReadString>
                                                              </Transition.Trigger>
                                                              <Transition.To>
                                                                <x:Reference>__ReferenceID8</x:Reference>
                                                              </Transition.To>
                                                              <Transition.Action>
                                                                <Sequence>
                                                                  <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                                    <AddToCollection.Item>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + "NULL;NULL;"+RtaCave+";RES"</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </AddToCollection.Item>
                                                                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </AddToCollection>
                                                                  <WriteLine Text="hide_question" />
                                                                </Sequence>
                                                              </Transition.Action>
                                                              <Transition.Condition>
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">(RtaCave.Equals("1") || RtaCave.Equals("2") || RtaCave.Equals("3") || RtaCave.Equals("4")) &amp;&amp; (Angulo.Length &lt;= NroPrueba)</mca:CSharpValue>
                                                              </Transition.Condition>
                                                            </Transition>
                                                            <Transition Trigger="{x:Reference __ReferenceID9}" DisplayName="" To="{x:Reference __ReferenceID10}">
                                                              <Transition.Action>
                                                                <Sequence>
                                                                  <WriteLine Text="hide_question" />
                                                                  <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                                    <AddToCollection.Item>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + "NULL;NULL;"+RtaCave+";RES"</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </AddToCollection.Item>
                                                                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </AddToCollection>
                                                                </Sequence>
                                                              </Transition.Action>
                                                              <Transition.Condition>
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">!(RtaCave.Equals("1") || RtaCave.Equals("2") || RtaCave.Equals("3") || RtaCave.Equals("4"))</mca:CSharpValue>
                                                              </Transition.Condition>
                                                            </Transition>
                                                            <Transition Trigger="{x:Reference __ReferenceID9}" DisplayName="Respondio" To="{x:Reference __ReferenceID6}">
                                                              <Transition.Action>
                                                                <Sequence>
                                                                  <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                                    <AddToCollection.Item>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + "NULL;NULL;"+RtaCave+";RES"</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </AddToCollection.Item>
                                                                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </AddToCollection>
                                                                  <WriteLine Text="hide_question" />
                                                                </Sequence>
                                                              </Transition.Action>
                                                              <Transition.Condition>
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">(RtaCave.Equals("1") || RtaCave.Equals("2") || RtaCave.Equals("3") || RtaCave.Equals("4"))&amp;&amp;(Angulo.Length&gt;NroPrueba)</mca:CSharpValue>
                                                              </Transition.Condition>
                                                            </Transition>
                                                          </State.Transitions>
                                                        </State>
                                                      </Transition.To>
                                                    </Transition>
                                                    <Transition Trigger="{x:Reference __ReferenceID7}" DisplayName="Terminr experimento" To="{x:Reference __ReferenceID8}">
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">(Preguntar.Equals("N")) &amp;&amp; (Angulo.Length &lt;= NroPrueba)</mca:CSharpValue>
                                                      </Transition.Condition>
                                                    </Transition>
                                                  </State.Transitions>
                                                </State>
                                              </Transition.To>
                                            </Transition>
                                          </State.Transitions>
                                        </State>
                                      </Transition.To>
                                      <Transition.Action>
                                        <Sequence>
                                          <WriteLine Text="Centro" />
                                          <If>
                                            <If.Condition>
                                              <InArgument x:TypeArguments="x:Boolean">
                                                <mca:CSharpValue x:TypeArguments="x:Boolean">NroProtocolo.Equals(2)</mca:CSharpValue>
                                              </InArgument>
                                            </If.Condition>
                                            <If.Then>
                                              <Sequence>
                                                <Assign>
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:Int32">
                                                      <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                    </OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                                <WriteLine DisplayName="WriteLine">
                                                  <InArgument x:TypeArguments="x:String">
                                                    <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Seleccione la bandera del medio\" }"</mca:CSharpValue>
                                                  </InArgument>
                                                </WriteLine>
                                                <WriteLine>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <mca:CSharpValue x:TypeArguments="x:String">Mostrar180</mca:CSharpValue>
                                                  </InArgument>
                                                </WriteLine>
                                              </Sequence>
                                            </If.Then>
                                            <If.Else>
                                              <Sequence>
                                                <WriteLine DisplayName="WriteLine">
                                                  <InArgument x:TypeArguments="x:String">
                                                    <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Esta la bandera en una nueva posicion?\" }"</mca:CSharpValue>
                                                  </InArgument>
                                                </WriteLine>
                                                <If>
                                                  <If.Condition>
                                                    <InArgument x:TypeArguments="x:Boolean">
                                                      <mca:CSharpValue x:TypeArguments="x:Boolean">Protocolo_P1[NroPrueba]==1</mca:CSharpValue>
                                                    </InArgument>
                                                  </If.Condition>
                                                  <If.Then>
                                                    <Sequence>
                                                      <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                        <AddToCollection.Item>
                                                          <InArgument x:TypeArguments="x:String">
                                                            <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + BanderasCircunferencia[BanderasExperimento[0]].X + ";" + BanderasCircunferencia[BanderasExperimento[0]].Y + ";" + BanderasExperimento[0] + ";MOS"</mca:CSharpValue>
                                                          </InArgument>
                                                        </AddToCollection.Item>
                                                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                        </InArgument>
                                                      </AddToCollection>
                                                      <WriteLine>
                                                        <InArgument x:TypeArguments="x:String">
                                                          <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(BanderasExperimento[0]) + "\", \"visible\":\"true\" }"</mca:CSharpValue>
                                                        </InArgument>
                                                      </WriteLine>
                                                    </Sequence>
                                                  </If.Then>
                                                  <If.Else>
                                                    <Sequence DisplayName="TestMemoria1">
                                                      <Assign>
                                                        <Assign.To>
                                                          <OutArgument x:TypeArguments="x:Int32">
                                                            <mca:CSharpReference x:TypeArguments="x:Int32">medio</mca:CSharpReference>
                                                          </OutArgument>
                                                        </Assign.To>
                                                        <Assign.Value>
                                                          <InArgument x:TypeArguments="x:Int32">
                                                            <mca:CSharpValue x:TypeArguments="x:Int32">Math.Abs(BanderasExperimento[0] + BanderasExperimento[1]) / 2</mca:CSharpValue>
                                                          </InArgument>
                                                        </Assign.Value>
                                                      </Assign>
                                                      <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                        <AddToCollection.Item>
                                                          <InArgument x:TypeArguments="x:String">
                                                            <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + BanderasCircunferencia[medio].X + ";" + BanderasCircunferencia[medio].Y + ";" + medio+ ";MOS"</mca:CSharpValue>
                                                          </InArgument>
                                                        </AddToCollection.Item>
                                                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                        </InArgument>
                                                      </AddToCollection>
                                                      <WriteLine>
                                                        <InArgument x:TypeArguments="x:String">
                                                          <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(medio) + "\", \"visible\":\"true\" }"</mca:CSharpValue>
                                                        </InArgument>
                                                      </WriteLine>
                                                    </Sequence>
                                                  </If.Else>
                                                </If>
                                              </Sequence>
                                            </If.Else>
                                          </If>
                                          <Assign>
                                            <Assign.To>
                                              <OutArgument x:TypeArguments="x:Int32">
                                                <mca:CSharpReference x:TypeArguments="x:Int32">NroPrueba</mca:CSharpReference>
                                              </OutArgument>
                                            </Assign.To>
                                            <Assign.Value>
                                              <InArgument x:TypeArguments="x:Int32">
                                                <mca:CSharpValue x:TypeArguments="x:Int32">NroPrueba+1</mca:CSharpValue>
                                              </InArgument>
                                            </Assign.Value>
                                          </Assign>
                                          <Assign>
                                            <Assign.To>
                                              <OutArgument x:TypeArguments="x:Int32">
                                                <mca:CSharpReference x:TypeArguments="x:Int32">IBanderaPar</mca:CSharpReference>
                                              </OutArgument>
                                            </Assign.To>
                                            <Assign.Value>
                                              <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                            </Assign.Value>
                                          </Assign>
                                        </Sequence>
                                      </Transition.Action>
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">((Math.Pow(Coordenadas.X, 2) + Math.Pow(Coordenadas.Y, 2)) &lt; Cercania)&amp;&amp;(IBanderaPar == 2) &amp;&amp; (Angulo.Length &gt; NroPrueba)</mca:CSharpValue>
                                      </Transition.Condition>
                                    </Transition>
                                  </State.Transitions>
                                </State>
                              </Transition.To>
                              <Transition.Action>
                                <Sequence>
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:Int32">
                                        <mca:CSharpReference x:TypeArguments="x:Int32">IBanderaPar</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:Int32">
                                        <mca:CSharpValue x:TypeArguments="x:Int32">IBanderaPar+1</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <If>
                                    <If.Condition>
                                      <InArgument x:TypeArguments="x:Boolean">
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">(((Math.Pow(BanderasCircunferencia[BanderasExperimento[0]].X - Coordenadas.X, 2) + Math.Pow(BanderasCircunferencia[BanderasExperimento[0]].Y - Coordenadas.Y, 2)) &lt; Cercania) &amp;&amp; (BanderasVisibles[0]))</mca:CSharpValue>
                                      </InArgument>
                                    </If.Condition>
                                    <If.Then>
                                      <Sequence>
                                        <WriteLine>
                                          <InArgument x:TypeArguments="x:String">
                                            <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(BanderasExperimento[0]) + "\", \"visible\":\"false\" }"</mca:CSharpValue>
                                          </InArgument>
                                        </WriteLine>
                                        <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                          <AddToCollection.Item>
                                            <InArgument x:TypeArguments="x:String">
                                              <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + BanderasCircunferencia[BanderasExperimento[0]].X + ";" + BanderasCircunferencia[BanderasExperimento[0]].Y + ";" + BanderasExperimento[0]+";CAP"</mca:CSharpValue>
                                            </InArgument>
                                          </AddToCollection.Item>
                                          <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                          </InArgument>
                                        </AddToCollection>
                                        <Assign>
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:Boolean">
                                              <mca:CSharpReference x:TypeArguments="x:Boolean">BanderasVisibles[0]</mca:CSharpReference>
                                            </OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                      </Sequence>
                                    </If.Then>
                                    <If.Else>
                                      <Sequence>
                                        <WriteLine>
                                          <InArgument x:TypeArguments="x:String">
                                            <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(BanderasExperimento[1]) + "\", \"visible\":\"false\" }"</mca:CSharpValue>
                                          </InArgument>
                                        </WriteLine>
                                        <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                          <AddToCollection.Item>
                                            <InArgument x:TypeArguments="x:String">
                                              <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + BanderasCircunferencia[BanderasExperimento[1]].X + ";" + BanderasCircunferencia[BanderasExperimento[1]].Y + ";" + BanderasExperimento[1]+";CAP"</mca:CSharpValue>
                                            </InArgument>
                                          </AddToCollection.Item>
                                          <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                          </InArgument>
                                        </AddToCollection>
                                        <Assign>
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:Boolean">
                                              <mca:CSharpReference x:TypeArguments="x:Boolean">BanderasVisibles[1]</mca:CSharpReference>
                                            </OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                      </Sequence>
                                    </If.Else>
                                  </If>
                                </Sequence>
                              </Transition.Action>
                              <Transition.Condition>
                                <mca:CSharpValue x:TypeArguments="x:Boolean">(((Math.Pow(BanderasCircunferencia[BanderasExperimento[0]].X - Coordenadas.X, 2) + Math.Pow(BanderasCircunferencia[BanderasExperimento[0]].Y - Coordenadas.Y, 2)) &lt; Cercania) &amp;&amp; (BanderasVisibles[0])) || (((Math.Pow(BanderasCircunferencia[BanderasExperimento[1]].X - Coordenadas.X, 2) + Math.Pow(BanderasCircunferencia[BanderasExperimento[1]].Y - Coordenadas.Y, 2)) &lt; Cercania) &amp;&amp; (BanderasVisibles[1]))</mca:CSharpValue>
                              </Transition.Condition>
                            </Transition>
                          </State.Transitions>
                        </State>
                      </Transition.To>
                      <Transition.Action>
                        <Sequence>
                          <If DisplayName="Mostrar Banderas">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">IBanderaPar==0</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <Sequence>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Int32">
                                      <mca:CSharpReference x:TypeArguments="x:Int32">BanderasExperimento[0]</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Int32">
                                      <mca:CSharpValue x:TypeArguments="x:Int32">new Random().Next(0, BanderasCircunferencia.Count-1)</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                                <WriteLine>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">(BanderasCircunferencia.Count - 1).ToString()</mca:CSharpValue>
                                  </InArgument>
                                </WriteLine>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Boolean">
                                      <mca:CSharpReference x:TypeArguments="x:Boolean">BanderasVisibles[0]</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Boolean">
                                      <mca:CSharpReference x:TypeArguments="x:Boolean">BanderasVisibles[1]</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Int32">
                                      <mca:CSharpReference x:TypeArguments="x:Int32">BanderasExperimento[1]</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Int32">
                                      <mca:CSharpValue x:TypeArguments="x:Int32">(BanderasExperimento[0] + (int)(Angulo[NroPrueba] / Separacion)) % BanderasCircunferencia.Count</mca:CSharpValue>
                                    </InArgument>
                                  </Assign.Value>
                                </Assign>
                                <WriteLine>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(BanderasExperimento[0]) + "\", \"visible\":\"true\" }"</mca:CSharpValue>
                                  </InArgument>
                                </WriteLine>
                                <WriteLine>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(BanderasExperimento[1]) + "\", \"visible\":\"true\" }"</mca:CSharpValue>
                                  </InArgument>
                                </WriteLine>
                              </Sequence>
                            </If.Then>
                          </If>
                        </Sequence>
                      </Transition.Action>
                      <Transition.Condition>
                        <mca:CSharpValue x:TypeArguments="x:Boolean">(IBanderaPar&lt;2)&amp;&amp;(Angulo.Length &gt; NroPrueba)</mca:CSharpValue>
                      </Transition.Condition>
                    </Transition>
                  </State.Transitions>
                </State>
              </Transition.To>
              <Transition.Action>
                <Sequence>
                  <WriteLine>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">"L{ \"id\":\"1\" }"</mca:CSharpValue>
                    </InArgument>
                  </WriteLine>
                  <WriteLine>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">Agregar180</mca:CSharpValue>
                    </InArgument>
                  </WriteLine>
                </Sequence>
              </Transition.Action>
            </Transition>
          </State.Transitions>
        </State>
      </StateMachine.InitialState>
      <x:Reference>__ReferenceID11</x:Reference>
      <x:Reference>__ReferenceID6</x:Reference>
      <x:Reference>__ReferenceID0</x:Reference>
      <x:Reference>__ReferenceID2</x:Reference>
      <x:Reference>__ReferenceID4</x:Reference>
      <x:Reference>__ReferenceID10</x:Reference>
      <x:Reference>__ReferenceID8</x:Reference>
      <x:Reference>__ReferenceID12</x:Reference>
      <StateMachine.Variables>
        <Variable x:TypeArguments="x:String" Name="RtaCave" />
        <Variable x:TypeArguments="sd:PointF" Name="Coordenadas" />
        <Variable x:TypeArguments="x:Int32" Name="NroPrueba" />
        <Variable x:TypeArguments="x:Int32" Name="IBanderaPar" />
        <Variable x:TypeArguments="s:Int32[]" Name="BanderasExperimento" />
        <Variable x:TypeArguments="s:Boolean[]" Name="BanderasVisibles" />
        <Variable x:TypeArguments="x:Int32" Name="Cercania" />
        <Variable x:TypeArguments="x:Int32" Name="medio" />
        <Variable x:TypeArguments="x:Int32" Name="Cursor" />
      </StateMachine.Variables>
      <sads:DebugSymbol.Symbol>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</sads:DebugSymbol.Symbol>
    </StateMachine>
  </p:Activity1.Implementation>
</p:Activity1>