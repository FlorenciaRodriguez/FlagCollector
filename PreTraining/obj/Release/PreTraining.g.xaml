<?xml version="1.0" encoding="utf-8"?>
<p:PreTraining xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:f="clr-namespace:FlagCollectorWorkflowActivities;assembly=ProtocoloSimple" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:p="clr-namespace:PreTraining;assembly=PreTraining" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sd="clr-namespace:System.Drawing;assembly=System.Drawing" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Drawing</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>ProtocoloSimple</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>PreTraining</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <p:PreTraining.Implementation>
    <StateMachine>
      <StateMachine.InitialState>
        <State x:Name="__ReferenceID13" DisplayName="Iniciar Variables">
          <State.Entry>
            <Sequence>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="scg:List(x:String)">
                    <mca:CSharpReference x:TypeArguments="scg:List(x:String)">Archivo</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="scg:List(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:List(x:String)">new List&lt;string&gt;();</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">Cercania</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">1</InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">Continuar</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">1</InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="sd:PointF">
                    <mca:CSharpReference x:TypeArguments="sd:PointF">Cruz</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="sd:PointF">
                    <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(0,0)</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="scg:List(sd:PointF)">
                    <mca:CSharpReference x:TypeArguments="scg:List(sd:PointF)">PosicionCruz</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="scg:List(sd:PointF)">
                    <mca:CSharpValue x:TypeArguments="scg:List(sd:PointF)">new List&lt;PointF&gt;()</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">TotalBanderas</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">360/Separacion</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="scg:List(x:Int32)">
                    <mca:CSharpReference x:TypeArguments="scg:List(x:Int32)">BanderasAparecidas</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="scg:List(x:Int32)">
                    <mca:CSharpValue x:TypeArguments="scg:List(x:Int32)">new List&lt;Int32&gt;()</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
          </State.Entry>
          <State.Transitions>
            <Transition DisplayName="Iniciar Experimento">
              <Transition.Trigger>
                <Sequence>
                  <f:ReadString BookmarkName="RtaCave">
                    <f:ReadString.Result>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                      </OutArgument>
                    </f:ReadString.Result>
                  </f:ReadString>
                  <Assign>
                    <Assign.To>
                      <OutArgument x:TypeArguments="sd:PointF">
                        <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="sd:PointF">
                        <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </Transition.Trigger>
              <Transition.To>
                <State x:Name="__ReferenceID2" DisplayName="Detenido">
                  <State.Entry>
                    <Sequence>
                      <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                        <AddToCollection.Item>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">DateTime.Now.ToString()+";"+
                Coordenadas.X+";"+Coordenadas.Y
                +";NULL;NULL;NULL;DET"</mca:CSharpValue>
                          </InArgument>
                        </AddToCollection.Item>
                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                        </InArgument>
                      </AddToCollection>
                      <WriteLine>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">DateTime.Now.ToString() + ";" +
                Coordenadas.X + ";" + Coordenadas.Y+ ";NULL;NULL;NULL;DET"</mca:CSharpValue>
                        </InArgument>
                      </WriteLine>
                      <WriteLine>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">"X{ \"value\":\"rojo\" }"</mca:CSharpValue>
                        </InArgument>
                      </WriteLine>
                      <Delay>
                        <InArgument x:TypeArguments="x:TimeSpan">
                          <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(2);</mca:CSharpValue>
                        </InArgument>
                      </Delay>
                      <WriteLine>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">"X{ \"value\":\"negro\" }"</mca:CSharpValue>
                        </InArgument>
                      </WriteLine>
                    </Sequence>
                  </State.Entry>
                  <State.Exit>
                    <WriteLine Text="hide_question" />
                  </State.Exit>
                  <State.Transitions>
                    <Transition DisplayName="ApareceBandera">
                      <Transition.Trigger>
                        <Sequence x:Name="__ReferenceID11">
                          <f:ReadString BookmarkName="RtaCave">
                            <f:ReadString.Result>
                              <OutArgument x:TypeArguments="x:String">
                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                              </OutArgument>
                            </f:ReadString.Result>
                          </f:ReadString>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="sd:PointF">
                                <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="sd:PointF">
                                <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                        </Sequence>
                      </Transition.Trigger>
                      <Transition.To>
                        <State x:Name="__ReferenceID10" DisplayName="Buscando">
                          <State.Entry>
                            <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                              <AddToCollection.Item>
                                <InArgument x:TypeArguments="x:String">
                                  <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString()+";"+Coordenadas.X+";"+Coordenadas.Y+";"+"NULL;NULL;NULL;BUS"</mca:CSharpValue>
                                </InArgument>
                              </AddToCollection.Item>
                              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                              </InArgument>
                            </AddToCollection>
                          </State.Entry>
                          <State.Exit>
                            <WriteLine>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + "NULL;NULL;NULL;BUS"</mca:CSharpValue>
                              </InArgument>
                            </WriteLine>
                          </State.Exit>
                          <State.Transitions>
                            <Transition DisplayName="Captura">
                              <Transition.Trigger>
                                <Sequence x:Name="__ReferenceID9">
                                  <f:ReadString BookmarkName="RtaCave">
                                    <f:ReadString.Result>
                                      <OutArgument x:TypeArguments="x:String">
                                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                      </OutArgument>
                                    </f:ReadString.Result>
                                  </f:ReadString>
                                  <Assign>
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="sd:PointF">
                                        <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                      </OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="sd:PointF">
                                        <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                      </InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </Sequence>
                              </Transition.Trigger>
                              <Transition.To>
                                <State x:Name="__ReferenceID8" DisplayName="Ir a Cruz">
                                  <State.Entry>
                                    <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                      <AddToCollection.Item>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString()+";"+Coordenadas.X+";"+Coordenadas.Y+";"+"NULL;NULL;NULL;CEN"</mca:CSharpValue>
                                        </InArgument>
                                      </AddToCollection.Item>
                                      <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                        <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                      </InArgument>
                                    </AddToCollection>
                                  </State.Entry>
                                  <State.Exit>
                                    <WriteLine>
                                      <InArgument x:TypeArguments="x:String">
                                        <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + "NULL;NULL;NULL;CEN"</mca:CSharpValue>
                                      </InArgument>
                                    </WriteLine>
                                  </State.Exit>
                                  <State.Transitions>
                                    <Transition DisplayName="Paso Por Cruz">
                                      <Transition.Trigger>
                                        <Sequence x:Name="__ReferenceID7">
                                          <f:ReadString BookmarkName="RtaCave">
                                            <f:ReadString.Result>
                                              <OutArgument x:TypeArguments="x:String">
                                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                              </OutArgument>
                                            </f:ReadString.Result>
                                          </f:ReadString>
                                          <Assign>
                                            <Assign.To>
                                              <OutArgument x:TypeArguments="sd:PointF">
                                                <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                              </OutArgument>
                                            </Assign.To>
                                            <Assign.Value>
                                              <InArgument x:TypeArguments="sd:PointF">
                                                <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                              </InArgument>
                                            </Assign.Value>
                                          </Assign>
                                        </Sequence>
                                      </Transition.Trigger>
                                      <Transition.To>
                                        <State x:Name="__ReferenceID6" DisplayName="Eligiendo Bandera">
                                          <State.Entry>
                                            <WriteLine>
                                              <InArgument x:TypeArguments="x:String">
                                                <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"" + ColorSeleccion + "\" }"</mca:CSharpValue>
                                              </InArgument>
                                            </WriteLine>
                                          </State.Entry>
                                          <State.Transitions>
                                            <Transition DisplayName="Eligio">
                                              <Transition.Trigger>
                                                <Sequence x:Name="__ReferenceID5">
                                                  <f:ReadString BookmarkName="RtaCave">
                                                    <f:ReadString.Result>
                                                      <OutArgument x:TypeArguments="x:String">
                                                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                      </OutArgument>
                                                    </f:ReadString.Result>
                                                  </f:ReadString>
                                                </Sequence>
                                              </Transition.Trigger>
                                              <Transition.To>
                                                <State x:Name="__ReferenceID1" DisplayName="Continuar?">
                                                  <State.Transitions>
                                                    <Transition DisplayName="T4">
                                                      <Transition.Trigger>
                                                        <f:ReadString x:Name="__ReferenceID0" BookmarkName="RtaCave">
                                                          <f:ReadString.Result>
                                                            <OutArgument x:TypeArguments="x:String">
                                                              <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                            </OutArgument>
                                                          </f:ReadString.Result>
                                                        </f:ReadString>
                                                      </Transition.Trigger>
                                                      <Transition.To>
                                                        <State x:Name="__ReferenceID12" DisplayName="FinalState" IsFinal="True">
                                                          <State.Entry>
                                                            <Sequence>
                                                              <WriteLine>
                                                                <InArgument x:TypeArguments="x:String">
                                                                  <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Fin del experimento\" }"</mca:CSharpValue>
                                                                </InArgument>
                                                              </WriteLine>
                                                              <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                                <AddToCollection.Item>
                                                                  <InArgument x:TypeArguments="x:String">
                                                                    <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString()+";"+Coordenadas.X+";"+Coordenadas.Y+";"+"NULL;NULL;NULL;FIN"</mca:CSharpValue>
                                                                  </InArgument>
                                                                </AddToCollection.Item>
                                                                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                                </InArgument>
                                                              </AddToCollection>
                                                              <WriteLine>
                                                                <InArgument x:TypeArguments="x:String">
                                                                  <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + "NULL;NULL;NULL;FIN"</mca:CSharpValue>
                                                                </InArgument>
                                                              </WriteLine>
                                                              <Delay>
                                                                <InArgument x:TypeArguments="x:TimeSpan">
                                                                  <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(5)</mca:CSharpValue>
                                                                </InArgument>
                                                              </Delay>
                                                              <WriteLine Text="hide_question" />
                                                            </Sequence>
                                                          </State.Entry>
                                                        </State>
                                                      </Transition.To>
                                                      <Transition.Action>
                                                        <WriteLine Text="hide_question" />
                                                      </Transition.Action>
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("2")</mca:CSharpValue>
                                                      </Transition.Condition>
                                                    </Transition>
                                                    <Transition Trigger="{x:Reference __ReferenceID0}" DisplayName="T5" To="{x:Reference __ReferenceID1}">
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">!RtaCave.Equals("1") &amp;&amp; !RtaCave.Equals("2")</mca:CSharpValue>
                                                      </Transition.Condition>
                                                    </Transition>
                                                    <Transition Trigger="{x:Reference __ReferenceID0}" DisplayName="Mover Cruz">
                                                      <Transition.To>
                                                        <State x:Name="__ReferenceID4" DisplayName="Ir a la Cruz">
                                                          <State.Entry>
                                                            <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                              <AddToCollection.Item>
                                                                <InArgument x:TypeArguments="x:String">
                                                                  <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + BanderasCircunferencia.ElementAt(Cursor).X + ";" + BanderasCircunferencia.ElementAt(Cursor).Y + ";" + Cursor + ";CRUZ"</mca:CSharpValue>
                                                                </InArgument>
                                                              </AddToCollection.Item>
                                                              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                              </InArgument>
                                                            </AddToCollection>
                                                          </State.Entry>
                                                          <State.Exit>
                                                            <WriteLine>
                                                              <InArgument x:TypeArguments="x:String">
                                                                <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + BanderasCircunferencia.ElementAt(Cursor).X + ";" + BanderasCircunferencia.ElementAt(Cursor).Y + ";" + Cursor + ";CRUZ"</mca:CSharpValue>
                                                              </InArgument>
                                                            </WriteLine>
                                                          </State.Exit>
                                                          <State.Transitions>
                                                            <Transition DisplayName="Paso Por Cruz">
                                                              <Transition.Trigger>
                                                                <Sequence x:Name="__ReferenceID3">
                                                                  <f:ReadString BookmarkName="RtaCave">
                                                                    <f:ReadString.Result>
                                                                      <OutArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </f:ReadString.Result>
                                                                  </f:ReadString>
                                                                  <Assign>
                                                                    <Assign.To>
                                                                      <OutArgument x:TypeArguments="sd:PointF">
                                                                        <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </Assign.To>
                                                                    <Assign.Value>
                                                                      <InArgument x:TypeArguments="sd:PointF">
                                                                        <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </Assign.Value>
                                                                  </Assign>
                                                                </Sequence>
                                                              </Transition.Trigger>
                                                              <Transition.To>
                                                                <x:Reference>__ReferenceID2</x:Reference>
                                                              </Transition.To>
                                                              <Transition.Condition>
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">Math.Sqrt((Math.Pow(Coordenadas.X - Cruz.X, 2)) + Math.Pow(Coordenadas.Y - Cruz.Y, 2)) &lt; Cercania</mca:CSharpValue>
                                                              </Transition.Condition>
                                                            </Transition>
                                                            <Transition Trigger="{x:Reference __ReferenceID3}" DisplayName="T1" To="{x:Reference __ReferenceID4}">
                                                              <Transition.Condition>
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">!(Math.Sqrt((Math.Pow(Coordenadas.X - Cruz.X, 2)) + Math.Pow(Coordenadas.Y - Cruz.Y, 2)) &lt; Cercania)</mca:CSharpValue>
                                                              </Transition.Condition>
                                                            </Transition>
                                                          </State.Transitions>
                                                        </State>
                                                      </Transition.To>
                                                      <Transition.Action>
                                                        <Sequence DisplayName="Cambiar Cruz">
                                                          <WriteLine Text="hide_question" />
                                                          <WriteLine>
                                                            <InArgument x:TypeArguments="x:String">
                                                              <mca:CSharpValue x:TypeArguments="x:String">"M{ \"x\":\""+Cruz.X+"\", \"y\":\""+Cruz.Y+"\" }"</mca:CSharpValue>
                                                            </InArgument>
                                                          </WriteLine>
                                                        </Sequence>
                                                      </Transition.Action>
                                                      <Transition.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("1")</mca:CSharpValue>
                                                      </Transition.Condition>
                                                    </Transition>
                                                  </State.Transitions>
                                                  <State.Variables>
                                                    <Variable x:TypeArguments="x:String" Name="variable1" />
                                                    <Variable x:TypeArguments="x:Int32" Name="CruzX" />
                                                    <Variable x:TypeArguments="x:Int32" Name="CruzY" />
                                                  </State.Variables>
                                                </State>
                                              </Transition.To>
                                              <Transition.Action>
                                                <Sequence DisplayName="Cambiar Cruz">
                                                  <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                    <AddToCollection.Item>
                                                      <InArgument x:TypeArguments="x:String">
                                                        <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + BanderasCircunferencia.ElementAt(Cursor).X + ";" + BanderasCircunferencia.ElementAt(Cursor).Y + ";" + Cursor + ";SEL"</mca:CSharpValue>
                                                      </InArgument>
                                                    </AddToCollection.Item>
                                                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                                    </InArgument>
                                                  </AddToCollection>
                                                  <WriteLine>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + BanderasCircunferencia.ElementAt(Cursor).X + ";" + BanderasCircunferencia.ElementAt(Cursor).Y + ";" + Cursor + ";SEL"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                  <WriteLine>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"Eligió la: "+Cursor</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                  <WriteLine>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"" + ColorBandera + "\" }"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                  <WriteLine>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">Mostrar180.Replace("true", "false")</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                  <WriteLine Text="hide_question" />
                                                  <Sequence DisplayName="Generar Cruz">
                                                    <Sequence.Variables>
                                                      <Variable x:TypeArguments="s:Random" Name="RandomX" />
                                                      <Variable x:TypeArguments="s:Random" Name="RandomY" />
                                                      <Variable x:TypeArguments="x:String" Name="variable2" />
                                                      <Variable x:TypeArguments="x:Int32" Name="CruzX" />
                                                      <Variable x:TypeArguments="x:Int32" Name="CruzY" />
                                                    </Sequence.Variables>
                                                    <Assign>
                                                      <Assign.To>
                                                        <OutArgument x:TypeArguments="s:Random">
                                                          <mca:CSharpReference x:TypeArguments="s:Random">RandomX</mca:CSharpReference>
                                                        </OutArgument>
                                                      </Assign.To>
                                                      <Assign.Value>
                                                        <InArgument x:TypeArguments="s:Random">
                                                          <mca:CSharpValue x:TypeArguments="s:Random">new Random()</mca:CSharpValue>
                                                        </InArgument>
                                                      </Assign.Value>
                                                    </Assign>
                                                    <Assign>
                                                      <Assign.To>
                                                        <OutArgument x:TypeArguments="s:Random">
                                                          <mca:CSharpReference x:TypeArguments="s:Random">RandomY</mca:CSharpReference>
                                                        </OutArgument>
                                                      </Assign.To>
                                                      <Assign.Value>
                                                        <InArgument x:TypeArguments="s:Random">
                                                          <mca:CSharpValue x:TypeArguments="s:Random">new Random()</mca:CSharpValue>
                                                        </InArgument>
                                                      </Assign.Value>
                                                    </Assign>
                                                    <Assign>
                                                      <Assign.To>
                                                        <OutArgument x:TypeArguments="x:Int32">
                                                          <mca:CSharpReference x:TypeArguments="x:Int32">CruzX</mca:CSharpReference>
                                                        </OutArgument>
                                                      </Assign.To>
                                                      <Assign.Value>
                                                        <InArgument x:TypeArguments="x:Int32">
                                                          <mca:CSharpValue x:TypeArguments="x:Int32">RandomX.Next(-13,13)</mca:CSharpValue>
                                                        </InArgument>
                                                      </Assign.Value>
                                                    </Assign>
                                                    <Assign>
                                                      <Assign.To>
                                                        <OutArgument x:TypeArguments="x:Int32">
                                                          <mca:CSharpReference x:TypeArguments="x:Int32">CruzY</mca:CSharpReference>
                                                        </OutArgument>
                                                      </Assign.To>
                                                      <Assign.Value>
                                                        <InArgument x:TypeArguments="x:Int32">
                                                          <mca:CSharpValue x:TypeArguments="x:Int32">RandomY.Next(-13, 13)</mca:CSharpValue>
                                                        </InArgument>
                                                      </Assign.Value>
                                                    </Assign>
                                                    <While>
                                                      <While.Condition>
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">(Math.Sqrt(Math.Pow(Cruz.X-CruzX,2)+Math.Pow(Cruz.Y-CruzY,2))&lt;Cercania) || (PosicionCruz.Contains(new PointF(CruzX,CruzY)))</mca:CSharpValue>
                                                      </While.Condition>
                                                      <Sequence>
                                                        <Assign>
                                                          <Assign.To>
                                                            <OutArgument x:TypeArguments="x:Int32">
                                                              <mca:CSharpReference x:TypeArguments="x:Int32">CruzX</mca:CSharpReference>
                                                            </OutArgument>
                                                          </Assign.To>
                                                          <Assign.Value>
                                                            <InArgument x:TypeArguments="x:Int32">
                                                              <mca:CSharpValue x:TypeArguments="x:Int32">RandomX.Next(-13,13)</mca:CSharpValue>
                                                            </InArgument>
                                                          </Assign.Value>
                                                        </Assign>
                                                        <Assign>
                                                          <Assign.To>
                                                            <OutArgument x:TypeArguments="x:Int32">
                                                              <mca:CSharpReference x:TypeArguments="x:Int32">CruzY</mca:CSharpReference>
                                                            </OutArgument>
                                                          </Assign.To>
                                                          <Assign.Value>
                                                            <InArgument x:TypeArguments="x:Int32">
                                                              <mca:CSharpValue x:TypeArguments="x:Int32">RandomY.Next(-13,13)</mca:CSharpValue>
                                                            </InArgument>
                                                          </Assign.Value>
                                                        </Assign>
                                                      </Sequence>
                                                    </While>
                                                    <AddToCollection x:TypeArguments="sd:PointF">
                                                      <AddToCollection.Item>
                                                        <InArgument x:TypeArguments="sd:PointF">
                                                          <mca:CSharpValue x:TypeArguments="sd:PointF">Cruz</mca:CSharpValue>
                                                        </InArgument>
                                                      </AddToCollection.Item>
                                                      <InArgument x:TypeArguments="scg:ICollection(sd:PointF)">
                                                        <mca:CSharpValue x:TypeArguments="scg:ICollection(sd:PointF)">PosicionCruz</mca:CSharpValue>
                                                      </InArgument>
                                                    </AddToCollection>
                                                    <Assign>
                                                      <Assign.To>
                                                        <OutArgument x:TypeArguments="x:Single">
                                                          <mca:CSharpReference x:TypeArguments="x:Single">Cruz.X</mca:CSharpReference>
                                                        </OutArgument>
                                                      </Assign.To>
                                                      <Assign.Value>
                                                        <InArgument x:TypeArguments="x:Single">
                                                          <mca:CSharpValue x:TypeArguments="x:Single">CruzX</mca:CSharpValue>
                                                        </InArgument>
                                                      </Assign.Value>
                                                    </Assign>
                                                    <Assign>
                                                      <Assign.To>
                                                        <OutArgument x:TypeArguments="x:Single">
                                                          <mca:CSharpReference x:TypeArguments="x:Single">Cruz.Y</mca:CSharpReference>
                                                        </OutArgument>
                                                      </Assign.To>
                                                      <Assign.Value>
                                                        <InArgument x:TypeArguments="x:Single">
                                                          <mca:CSharpValue x:TypeArguments="x:Single">CruzY</mca:CSharpValue>
                                                        </InArgument>
                                                      </Assign.Value>
                                                    </Assign>
                                                  </Sequence>
                                                  <WriteLine>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Terminar Experimento?\" }"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                </Sequence>
                                              </Transition.Action>
                                              <Transition.Condition>
                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("2")</mca:CSharpValue>
                                              </Transition.Condition>
                                            </Transition>
                                            <Transition Trigger="{x:Reference __ReferenceID5}" DisplayName="T2" To="{x:Reference __ReferenceID6}">
                                              <Transition.Action>
                                                <Sequence>
                                                  <WriteLine>
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"" + ColorBandera + "\" }"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                  <If>
                                                    <If.Condition>
                                                      <InArgument x:TypeArguments="x:Boolean">
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("1")</mca:CSharpValue>
                                                      </InArgument>
                                                    </If.Condition>
                                                    <If.Then>
                                                      <Sequence>
                                                        <Assign>
                                                          <Assign.To>
                                                            <OutArgument x:TypeArguments="x:Int32">
                                                              <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                            </OutArgument>
                                                          </Assign.To>
                                                          <Assign.Value>
                                                            <InArgument x:TypeArguments="x:Int32">
                                                              <mca:CSharpValue x:TypeArguments="x:Int32">(Cursor - 1) % BanderasCircunferencia.Count</mca:CSharpValue>
                                                            </InArgument>
                                                          </Assign.Value>
                                                        </Assign>
                                                        <If>
                                                          <If.Condition>
                                                            <InArgument x:TypeArguments="x:Boolean">
                                                              <mca:CSharpValue x:TypeArguments="x:Boolean">Cursor&lt;0</mca:CSharpValue>
                                                            </InArgument>
                                                          </If.Condition>
                                                          <If.Then>
                                                            <Assign>
                                                              <Assign.To>
                                                                <OutArgument x:TypeArguments="x:Int32">
                                                                  <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                                </OutArgument>
                                                              </Assign.To>
                                                              <Assign.Value>
                                                                <InArgument x:TypeArguments="x:Int32">
                                                                  <mca:CSharpValue x:TypeArguments="x:Int32">BanderasCircunferencia.Count-1</mca:CSharpValue>
                                                                </InArgument>
                                                              </Assign.Value>
                                                            </Assign>
                                                          </If.Then>
                                                        </If>
                                                      </Sequence>
                                                    </If.Then>
                                                    <If.Else>
                                                      <Assign>
                                                        <Assign.To>
                                                          <OutArgument x:TypeArguments="x:Int32">
                                                            <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                          </OutArgument>
                                                        </Assign.To>
                                                        <Assign.Value>
                                                          <InArgument x:TypeArguments="x:Int32">
                                                            <mca:CSharpValue x:TypeArguments="x:Int32">(Cursor + 1) % BanderasCircunferencia.Count</mca:CSharpValue>
                                                          </InArgument>
                                                        </Assign.Value>
                                                      </Assign>
                                                    </If.Else>
                                                  </If>
                                                </Sequence>
                                              </Transition.Action>
                                              <Transition.Condition>
                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("1") || RtaCave.Equals("3")</mca:CSharpValue>
                                              </Transition.Condition>
                                            </Transition>
                                          </State.Transitions>
                                        </State>
                                      </Transition.To>
                                      <Transition.Action>
                                        <Sequence>
                                          <Assign>
                                            <Assign.To>
                                              <OutArgument x:TypeArguments="x:Int32">
                                                <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                              </OutArgument>
                                            </Assign.To>
                                            <Assign.Value>
                                              <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                            </Assign.Value>
                                          </Assign>
                                          <WriteLine DisplayName="WriteLine">
                                            <InArgument x:TypeArguments="x:String">
                                              <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Marca la bandera que recolectaste.\" }"</mca:CSharpValue>
                                            </InArgument>
                                          </WriteLine>
                                          <WriteLine>
                                            <InArgument x:TypeArguments="x:String">
                                              <mca:CSharpValue x:TypeArguments="x:String">Mostrar180</mca:CSharpValue>
                                            </InArgument>
                                          </WriteLine>
                                        </Sequence>
                                      </Transition.Action>
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">Math.Sqrt((Math.Pow(Coordenadas.X - Cruz.X, 2)) + Math.Pow(Coordenadas.Y - Cruz.Y, 2)) &lt; Cercania</mca:CSharpValue>
                                      </Transition.Condition>
                                    </Transition>
                                    <Transition Trigger="{x:Reference __ReferenceID7}" DisplayName="No Cruz" To="{x:Reference __ReferenceID8}">
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">!(Math.Sqrt((Math.Pow(Coordenadas.X - Cruz.X, 2)) + Math.Pow(Coordenadas.Y - Cruz.Y, 2)) &lt; Cercania)</mca:CSharpValue>
                                      </Transition.Condition>
                                    </Transition>
                                  </State.Transitions>
                                </State>
                              </Transition.To>
                              <Transition.Action>
                                <Sequence>
                                  <WriteLine>
                                    <InArgument x:TypeArguments="x:String">
                                      <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(BanderaRandom) + "\", \"visible\":\"false\" }"</mca:CSharpValue>
                                    </InArgument>
                                  </WriteLine>
                                  <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                    <AddToCollection.Item>
                                      <InArgument x:TypeArguments="x:String">
                                        <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + BanderasCircunferencia[BanderaRandom].X + ";" + BanderasCircunferencia[BanderaRandom].Y + ";" + BanderaRandom+";CAP"</mca:CSharpValue>
                                      </InArgument>
                                    </AddToCollection.Item>
                                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Archivo</mca:CSharpValue>
                                    </InArgument>
                                  </AddToCollection>
                                  <WriteLine>
                                    <InArgument x:TypeArguments="x:String">
                                      <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + BanderasCircunferencia[BanderaRandom].X + ";" + BanderasCircunferencia[BanderaRandom].Y + ";" + BanderaRandom + ";CAP"</mca:CSharpValue>
                                    </InArgument>
                                  </WriteLine>
                                </Sequence>
                              </Transition.Action>
                              <Transition.Condition>
                                <mca:CSharpValue x:TypeArguments="x:Boolean">Math.Sqrt((Math.Pow(Coordenadas.X - BanderasCircunferencia[BanderaRandom].X, 2)) + Math.Pow(Coordenadas.Y - BanderasCircunferencia[BanderaRandom].Y, 2)) &lt; Cercania</mca:CSharpValue>
                              </Transition.Condition>
                            </Transition>
                            <Transition Trigger="{x:Reference __ReferenceID9}" DisplayName="No Caprtura" To="{x:Reference __ReferenceID10}">
                              <Transition.Condition>
                                <mca:CSharpValue x:TypeArguments="x:Boolean">!(Math.Sqrt((Math.Pow(Coordenadas.X - BanderasCircunferencia[BanderaRandom].X, 2)) + Math.Pow(Coordenadas.Y - BanderasCircunferencia[BanderaRandom].Y, 2)) &lt; Cercania)</mca:CSharpValue>
                              </Transition.Condition>
                            </Transition>
                          </State.Transitions>
                        </State>
                      </Transition.To>
                      <Transition.Action>
                        <Sequence DisplayName="GenerarBanderaRandom">
                          <Sequence.Variables>
                            <Variable x:TypeArguments="s:Random" Name="Random" />
                          </Sequence.Variables>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="s:Random">
                                <mca:CSharpReference x:TypeArguments="s:Random">Random</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="s:Random">
                                <mca:CSharpValue x:TypeArguments="s:Random">new Random()</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Int32">
                                <mca:CSharpReference x:TypeArguments="x:Int32">BanderaRandom</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Int32">
                                <mca:CSharpValue x:TypeArguments="x:Int32">Random.Next(0,BanderasCircunferencia.Count)</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <While>
                            <While.Condition>
                              <mca:CSharpValue x:TypeArguments="x:Boolean">BanderasAparecidas.Contains(BanderaRandom)</mca:CSharpValue>
                            </While.Condition>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpReference x:TypeArguments="x:Int32">BanderaRandom</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpValue x:TypeArguments="x:Int32">Random.Next(0,TotalBanderas)</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                          </While>
                          <WriteLine>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(BanderaRandom) + "\", \"visible\":\"true\" }"</mca:CSharpValue>
                            </InArgument>
                          </WriteLine>
                        </Sequence>
                      </Transition.Action>
                      <Transition.Condition>
                        <mca:CSharpValue x:TypeArguments="x:Boolean">Continuar&gt;0</mca:CSharpValue>
                      </Transition.Condition>
                    </Transition>
                    <Transition Trigger="{x:Reference __ReferenceID11}" DisplayName="Terminar" To="{x:Reference __ReferenceID12}">
                      <Transition.Condition>
                        <mca:CSharpValue x:TypeArguments="x:Boolean">Continuar&lt;0</mca:CSharpValue>
                      </Transition.Condition>
                    </Transition>
                  </State.Transitions>
                </State>
              </Transition.To>
              <Transition.Action>
                <Sequence>
                  <WriteLine>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">Agregar180</mca:CSharpValue>
                    </InArgument>
                  </WriteLine>
                  <WriteLine>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">"L{ \"id\":\""+Escenario+"\" }"</mca:CSharpValue>
                    </InArgument>
                  </WriteLine>
                </Sequence>
              </Transition.Action>
            </Transition>
          </State.Transitions>
        </State>
      </StateMachine.InitialState>
      <x:Reference>__ReferenceID13</x:Reference>
      <x:Reference>__ReferenceID2</x:Reference>
      <x:Reference>__ReferenceID10</x:Reference>
      <x:Reference>__ReferenceID12</x:Reference>
      <x:Reference>__ReferenceID6</x:Reference>
      <x:Reference>__ReferenceID1</x:Reference>
      <x:Reference>__ReferenceID8</x:Reference>
      <x:Reference>__ReferenceID4</x:Reference>
      <StateMachine.Variables>
        <Variable x:TypeArguments="sd:PointF" Name="Cruz" />
        <Variable x:TypeArguments="x:String" Name="RtaCave" />
        <Variable x:TypeArguments="sd:PointF" Name="Coordenadas" />
        <Variable x:TypeArguments="x:Int32" Name="TotalBanderas" />
        <Variable x:TypeArguments="scg:List(x:Int32)" Name="BanderasAparecidas" />
        <Variable x:TypeArguments="x:Int32" Name="Continuar" />
        <Variable x:TypeArguments="x:Int32" Name="Cercania" />
        <Variable x:TypeArguments="x:Int32" Name="Cursor" />
        <Variable x:TypeArguments="scg:List(sd:PointF)" Name="PosicionCruz" />
        <Variable x:TypeArguments="x:Int32" Name="BanderaRandom" />
      </StateMachine.Variables>
      <sads:DebugSymbol.Symbol>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</sads:DebugSymbol.Symbol>
    </StateMachine>
  </p:PreTraining.Implementation>
</p:PreTraining>