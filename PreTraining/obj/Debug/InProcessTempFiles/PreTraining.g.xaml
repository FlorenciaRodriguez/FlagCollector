<?xml version="1.0" encoding="utf-8"?>
<local:PreTraining xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:local="clr-namespace:PreTraining;assembly=PreTraining" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sd="clr-namespace:System.Drawing;assembly=System.Drawing" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Drawing</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>Ejercicio</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>PreTraining</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <local:PreTraining.Implementation>
    <StateMachine>
      <StateMachine.InitialState>
        <State x:Name="__ReferenceID13" DisplayName="Iniciar Variables">
          <State.Entry>
            <Sequence>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="scg:List(x:String)">
                    <mca:CSharpReference x:TypeArguments="scg:List(x:String)">Reporte</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="scg:List(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:List(x:String)">new List&lt;string&gt;();</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="scg:List(x:String)">
                    <mca:CSharpReference x:TypeArguments="scg:List(x:String)">Recorrido</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="scg:List(x:String)">
                    <mca:CSharpValue x:TypeArguments="scg:List(x:String)">new List&lt;string&gt;();</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">Cercania</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">1</InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">Continuar</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">1</InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="sd:PointF">
                    <mca:CSharpReference x:TypeArguments="sd:PointF">Cruz</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="sd:PointF">
                    <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(0,0)</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="scg:List(sd:PointF)">
                    <mca:CSharpReference x:TypeArguments="scg:List(sd:PointF)">PosicionCruz</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="scg:List(sd:PointF)">
                    <mca:CSharpValue x:TypeArguments="scg:List(sd:PointF)">new List&lt;PointF&gt;()</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">
                    <mca:CSharpReference x:TypeArguments="x:Int32">TotalBanderas</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">
                    <mca:CSharpValue x:TypeArguments="x:Int32">360/Separacion</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
              <Assign>
                <Assign.To>
                  <OutArgument x:TypeArguments="scg:List(x:Int32)">
                    <mca:CSharpReference x:TypeArguments="scg:List(x:Int32)">BanderasAparecidas</mca:CSharpReference>
                  </OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="scg:List(x:Int32)">
                    <mca:CSharpValue x:TypeArguments="scg:List(x:Int32)">new List&lt;Int32&gt;()</mca:CSharpValue>
                  </InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
          </State.Entry>
          <State.Transitions>
            <Transition DisplayName="Iniciar Experimento">
              <Transition.Trigger>
                <Sequence DisplayName="Recibir Coordenadas">
                  <local:ReadString BookmarkName="RtaCave">
                    <local:ReadString.Result>
                      <OutArgument x:TypeArguments="x:String">
                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                      </OutArgument>
                    </local:ReadString.Result>
                  </local:ReadString>
                  <If DisplayName="Es un movimiento de joystick o apreto un boton">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length &gt; 1</mca:CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <Assign>
                        <Assign.To>
                          <OutArgument x:TypeArguments="sd:PointF">
                            <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                          </OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="sd:PointF">
                            <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Then>
                  </If>
                </Sequence>
              </Transition.Trigger>
              <Transition.To>
                <State x:Name="__ReferenceID4" DisplayName="Detenido">
                  <State.Entry>
                    <Sequence>
                      <Sequence DisplayName="Salida">
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">
                              <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">DateTime.Now.ToString() + ";" +
                Coordenadas.X + ";" + Coordenadas.Y + ";DET"</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                        <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                          <AddToCollection.Item>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                            </InArgument>
                          </AddToCollection.Item>
                          <InArgument x:TypeArguments="scg:ICollection(x:String)">
                            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                          </InArgument>
                        </AddToCollection>
                        <WriteLine>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                          </InArgument>
                        </WriteLine>
                      </Sequence>
                      <Sequence DisplayName="Cambiar el color de la Cruz">
                        <WriteLine>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">"X{ \"value\":\"rojo\" }"</mca:CSharpValue>
                          </InArgument>
                        </WriteLine>
                        <Delay>
                          <InArgument x:TypeArguments="x:TimeSpan">
                            <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(1);</mca:CSharpValue>
                          </InArgument>
                        </Delay>
                        <WriteLine>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">"X{ \"value\":\"negro\" }"</mca:CSharpValue>
                          </InArgument>
                        </WriteLine>
                      </Sequence>
                    </Sequence>
                  </State.Entry>
                  <State.Exit>
                    <Sequence>
                      <Sequence DisplayName="Mostrar Nro Iteracion">
                        <WriteLine>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Trial " + (int)(BanderasAparecidas.Count + 1) + " \" }"</mca:CSharpValue>
                          </InArgument>
                        </WriteLine>
                        <Delay>
                          <InArgument x:TypeArguments="x:TimeSpan">
                            <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(2)</mca:CSharpValue>
                          </InArgument>
                        </Delay>
                        <WriteLine Text="hide_question" />
                      </Sequence>
                      <Sequence DisplayName="Salida">
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">
                              <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">"Iteracion;"+BanderasAparecidas.Count</mca:CSharpValue>
                            </InArgument>
                          </Assign.Value>
                        </Assign>
                        <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                          <AddToCollection.Item>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                            </InArgument>
                          </AddToCollection.Item>
                          <InArgument x:TypeArguments="scg:ICollection(x:String)">
                            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                          </InArgument>
                        </AddToCollection>
                        <WriteLine>
                          <InArgument x:TypeArguments="x:String">
                            <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                          </InArgument>
                        </WriteLine>
                      </Sequence>
                    </Sequence>
                  </State.Exit>
                  <State.Transitions>
                    <Transition DisplayName="ApareceBandera">
                      <Transition.Trigger>
                        <Sequence x:Name="__ReferenceID11" DisplayName="Recibir Coordenadas">
                          <local:ReadString BookmarkName="RtaCave">
                            <local:ReadString.Result>
                              <OutArgument x:TypeArguments="x:String">
                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                              </OutArgument>
                            </local:ReadString.Result>
                          </local:ReadString>
                          <If DisplayName="Es un movimiento de joystick o apreto un boton">
                            <If.Condition>
                              <InArgument x:TypeArguments="x:Boolean">
                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length &gt; 1</mca:CSharpValue>
                              </InArgument>
                            </If.Condition>
                            <If.Then>
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="sd:PointF">
                                    <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="sd:PointF">
                                    <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                  </InArgument>
                                </Assign.Value>
                              </Assign>
                            </If.Then>
                          </If>
                        </Sequence>
                      </Transition.Trigger>
                      <Transition.To>
                        <State x:Name="__ReferenceID10" DisplayName="Buscando">
                          <State.Entry>
                            <Sequence DisplayName="Salida">
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">
                                    <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                  </OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + "BUS"</mca:CSharpValue>
                                  </InArgument>
                                </Assign.Value>
                              </Assign>
                              <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                <AddToCollection.Item>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                  </InArgument>
                                </AddToCollection.Item>
                                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                </InArgument>
                              </AddToCollection>
                              <WriteLine>
                                <InArgument x:TypeArguments="x:String">
                                  <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                </InArgument>
                              </WriteLine>
                            </Sequence>
                          </State.Entry>
                          <State.Transitions>
                            <Transition DisplayName="Captura">
                              <Transition.Trigger>
                                <Sequence x:Name="__ReferenceID9" DisplayName="Recibir Coordenadas">
                                  <local:ReadString BookmarkName="RtaCave">
                                    <local:ReadString.Result>
                                      <OutArgument x:TypeArguments="x:String">
                                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                      </OutArgument>
                                    </local:ReadString.Result>
                                  </local:ReadString>
                                  <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                    <If.Condition>
                                      <InArgument x:TypeArguments="x:Boolean">
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length &gt; 1</mca:CSharpValue>
                                      </InArgument>
                                    </If.Condition>
                                    <If.Then>
                                      <Assign>
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="sd:PointF">
                                            <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                          </OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="sd:PointF">
                                            <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                          </InArgument>
                                        </Assign.Value>
                                      </Assign>
                                    </If.Then>
                                  </If>
                                </Sequence>
                              </Transition.Trigger>
                              <Transition.To>
                                <State x:Name="__ReferenceID0" DisplayName="Ir a Cruz">
                                  <State.Exit>
                                    <Sequence DisplayName="Salida">
                                      <Assign>
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:String">
                                            <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                          </OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:String">
                                            <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + "NULL;NULL;NULL;CEN"</mca:CSharpValue>
                                          </InArgument>
                                        </Assign.Value>
                                      </Assign>
                                      <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                        <AddToCollection.Item>
                                          <InArgument x:TypeArguments="x:String">
                                            <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                          </InArgument>
                                        </AddToCollection.Item>
                                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                        </InArgument>
                                      </AddToCollection>
                                      <WriteLine>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                        </InArgument>
                                      </WriteLine>
                                    </Sequence>
                                  </State.Exit>
                                  <State.Transitions>
                                    <Transition DisplayName="No Cruz">
                                      <Transition.Trigger>
                                        <Sequence x:Name="__ReferenceID1" DisplayName="Recibir Coordenadas">
                                          <local:ReadString BookmarkName="RtaCave">
                                            <local:ReadString.Result>
                                              <OutArgument x:TypeArguments="x:String">
                                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                              </OutArgument>
                                            </local:ReadString.Result>
                                          </local:ReadString>
                                          <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                            <If.Condition>
                                              <InArgument x:TypeArguments="x:Boolean">
                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length &gt; 1</mca:CSharpValue>
                                              </InArgument>
                                            </If.Condition>
                                            <If.Then>
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="sd:PointF">
                                                    <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="sd:PointF">
                                                    <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                            </If.Then>
                                          </If>
                                        </Sequence>
                                      </Transition.Trigger>
                                      <Transition.To>
                                        <x:Reference>__ReferenceID0</x:Reference>
                                      </Transition.To>
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">!(Math.Sqrt((Math.Pow(Coordenadas.X - Cruz.X, 2)) + Math.Pow(Coordenadas.Y - Cruz.Y, 2)) &lt; Cercania)</mca:CSharpValue>
                                      </Transition.Condition>
                                    </Transition>
                                    <Transition Trigger="{x:Reference __ReferenceID1}" DisplayName="Paso Por Cruz">
                                      <Transition.To>
                                        <State x:Name="__ReferenceID14" DisplayName="Evaluando">
                                          <State.Exit>
                                            <Sequence DisplayName="Salidas">
                                              <Assign>
                                                <Assign.To>
                                                  <OutArgument x:TypeArguments="x:String">
                                                    <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                  </OutArgument>
                                                </Assign.To>
                                                <Assign.Value>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";EVA"</mca:CSharpValue>
                                                  </InArgument>
                                                </Assign.Value>
                                              </Assign>
                                              <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                                                <AddToCollection.Item>
                                                  <InArgument x:TypeArguments="x:String">
                                                    <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                  </InArgument>
                                                </AddToCollection.Item>
                                                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                                </InArgument>
                                              </AddToCollection>
                                              <WriteLine>
                                                <InArgument x:TypeArguments="x:String">
                                                  <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                </InArgument>
                                              </WriteLine>
                                            </Sequence>
                                          </State.Exit>
                                          <State.Transitions>
                                            <Transition DisplayName="Protocolo Circunferencia">
                                              <Transition.Trigger>
                                                <Sequence DisplayName="Recibir Coordenadas">
                                                  <local:ReadString BookmarkName="RtaCave">
                                                    <local:ReadString.Result>
                                                      <OutArgument x:TypeArguments="x:String">
                                                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                      </OutArgument>
                                                    </local:ReadString.Result>
                                                  </local:ReadString>
                                                  <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                                    <If.Condition>
                                                      <InArgument x:TypeArguments="x:Boolean">
                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length &gt; 1</mca:CSharpValue>
                                                      </InArgument>
                                                    </If.Condition>
                                                    <If.Then>
                                                      <Assign>
                                                        <Assign.To>
                                                          <OutArgument x:TypeArguments="sd:PointF">
                                                            <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                          </OutArgument>
                                                        </Assign.To>
                                                        <Assign.Value>
                                                          <InArgument x:TypeArguments="sd:PointF">
                                                            <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                          </InArgument>
                                                        </Assign.Value>
                                                      </Assign>
                                                    </If.Then>
                                                  </If>
                                                </Sequence>
                                              </Transition.Trigger>
                                              <Transition.To>
                                                <State x:Name="__ReferenceID15" DisplayName="Seleccionando Bandera">
                                                  <State.Entry>
                                                    <Sequence DisplayName="Cambiar color Bandera de Cursor">
                                                      <WriteLine>
                                                        <InArgument x:TypeArguments="x:String">
                                                          <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"azul\" }"</mca:CSharpValue>
                                                        </InArgument>
                                                      </WriteLine>
                                                    </Sequence>
                                                  </State.Entry>
                                                  <State.Exit>
                                                    <Sequence DisplayName="Salidas">
                                                      <Assign>
                                                        <Assign.To>
                                                          <OutArgument x:TypeArguments="x:String">
                                                            <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                          </OutArgument>
                                                        </Assign.To>
                                                        <Assign.Value>
                                                          <InArgument x:TypeArguments="x:String">
                                                            <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";PR2"</mca:CSharpValue>
                                                          </InArgument>
                                                        </Assign.Value>
                                                      </Assign>
                                                      <AddToCollection x:TypeArguments="x:String" DisplayName="Recorrido">
                                                        <AddToCollection.Item>
                                                          <InArgument x:TypeArguments="x:String">
                                                            <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                          </InArgument>
                                                        </AddToCollection.Item>
                                                        <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                          <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                                        </InArgument>
                                                      </AddToCollection>
                                                      <WriteLine DisplayName="Pantalla">
                                                        <InArgument x:TypeArguments="x:String">
                                                          <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                        </InArgument>
                                                      </WriteLine>
                                                    </Sequence>
                                                  </State.Exit>
                                                  <State.Transitions>
                                                    <Transition DisplayName="T6">
                                                      <Transition.To>
                                                        <State x:Name="__ReferenceID8" DisplayName="Fin Test Memoria">
                                                          <State.Entry>
                                                            <WriteLine>
                                                              <InArgument x:TypeArguments="x:String">
                                                                <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"" + ColorSeleccion + "\" }"</mca:CSharpValue>
                                                              </InArgument>
                                                            </WriteLine>
                                                          </State.Entry>
                                                          <State.Transitions>
                                                            <Transition DisplayName="Eligio">
                                                              <Transition.Trigger>
                                                                <Sequence x:Name="__ReferenceID7" DisplayName="Recibir Coordenadas">
                                                                  <local:ReadString BookmarkName="RtaCave">
                                                                    <local:ReadString.Result>
                                                                      <OutArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                                      </OutArgument>
                                                                    </local:ReadString.Result>
                                                                  </local:ReadString>
                                                                  <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                                                    <If.Condition>
                                                                      <InArgument x:TypeArguments="x:Boolean">
                                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length &gt; 1</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </If.Condition>
                                                                    <If.Then>
                                                                      <Assign>
                                                                        <Assign.To>
                                                                          <OutArgument x:TypeArguments="sd:PointF">
                                                                            <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                                          </OutArgument>
                                                                        </Assign.To>
                                                                        <Assign.Value>
                                                                          <InArgument x:TypeArguments="sd:PointF">
                                                                            <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </Assign.Value>
                                                                      </Assign>
                                                                    </If.Then>
                                                                  </If>
                                                                </Sequence>
                                                              </Transition.Trigger>
                                                              <Transition.To>
                                                                <State x:Name="__ReferenceID3" DisplayName="Continuar?">
                                                                  <State.Transitions>
                                                                    <Transition DisplayName="T4">
                                                                      <Transition.Trigger>
                                                                        <Sequence x:Name="__ReferenceID2" DisplayName="Recibir Coordenadas">
                                                                          <local:ReadString BookmarkName="RtaCave">
                                                                            <local:ReadString.Result>
                                                                              <OutArgument x:TypeArguments="x:String">
                                                                                <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                                              </OutArgument>
                                                                            </local:ReadString.Result>
                                                                          </local:ReadString>
                                                                          <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                                                            <If.Condition>
                                                                              <InArgument x:TypeArguments="x:Boolean">
                                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length &gt; 1</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </If.Condition>
                                                                            <If.Then>
                                                                              <Assign>
                                                                                <Assign.To>
                                                                                  <OutArgument x:TypeArguments="sd:PointF">
                                                                                    <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                                                  </OutArgument>
                                                                                </Assign.To>
                                                                                <Assign.Value>
                                                                                  <InArgument x:TypeArguments="sd:PointF">
                                                                                    <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                                                  </InArgument>
                                                                                </Assign.Value>
                                                                              </Assign>
                                                                            </If.Then>
                                                                          </If>
                                                                        </Sequence>
                                                                      </Transition.Trigger>
                                                                      <Transition.To>
                                                                        <State x:Name="__ReferenceID12" DisplayName="FinalState" IsFinal="True">
                                                                          <State.Entry>
                                                                            <Sequence>
                                                                              <WriteLine>
                                                                                <InArgument x:TypeArguments="x:String">
                                                                                  <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Fin del experimento\" }"</mca:CSharpValue>
                                                                                </InArgument>
                                                                              </WriteLine>
                                                                              <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                                                <AddToCollection.Item>
                                                                                  <InArgument x:TypeArguments="x:String">
                                                                                    <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString()+";"+Coordenadas.X+";"+Coordenadas.Y+";"+";FIN"</mca:CSharpValue>
                                                                                  </InArgument>
                                                                                </AddToCollection.Item>
                                                                                <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                                  <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                                                                </InArgument>
                                                                              </AddToCollection>
                                                                              <WriteLine>
                                                                                <InArgument x:TypeArguments="x:String">
                                                                                  <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + "NULL;NULL;NULL;FIN"</mca:CSharpValue>
                                                                                </InArgument>
                                                                              </WriteLine>
                                                                              <Delay>
                                                                                <InArgument x:TypeArguments="x:TimeSpan">
                                                                                  <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(5)</mca:CSharpValue>
                                                                                </InArgument>
                                                                              </Delay>
                                                                              <WriteLine Text="hide_question" />
                                                                            </Sequence>
                                                                          </State.Entry>
                                                                        </State>
                                                                      </Transition.To>
                                                                      <Transition.Action>
                                                                        <WriteLine Text="hide_question" />
                                                                      </Transition.Action>
                                                                      <Transition.Condition>
                                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("2")</mca:CSharpValue>
                                                                      </Transition.Condition>
                                                                    </Transition>
                                                                    <Transition Trigger="{x:Reference __ReferenceID2}" DisplayName="T5" To="{x:Reference __ReferenceID3}">
                                                                      <Transition.Condition>
                                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">!RtaCave.Equals("1") &amp;&amp; !RtaCave.Equals("2")</mca:CSharpValue>
                                                                      </Transition.Condition>
                                                                    </Transition>
                                                                    <Transition Trigger="{x:Reference __ReferenceID2}" DisplayName="Mover Cruz">
                                                                      <Transition.To>
                                                                        <State x:Name="__ReferenceID6" DisplayName="Ir a la Cruz">
                                                                          <State.Transitions>
                                                                            <Transition DisplayName="Paso Por Cruz">
                                                                              <Transition.Trigger>
                                                                                <Sequence x:Name="__ReferenceID5" DisplayName="Recibir Coordenadas">
                                                                                  <local:ReadString BookmarkName="RtaCave">
                                                                                    <local:ReadString.Result>
                                                                                      <OutArgument x:TypeArguments="x:String">
                                                                                        <mca:CSharpReference x:TypeArguments="x:String">RtaCave</mca:CSharpReference>
                                                                                      </OutArgument>
                                                                                    </local:ReadString.Result>
                                                                                  </local:ReadString>
                                                                                  <If DisplayName="Es un movimiento de joystick o apreto un boton">
                                                                                    <If.Condition>
                                                                                      <InArgument x:TypeArguments="x:Boolean">
                                                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Split(';').Length &gt; 1</mca:CSharpValue>
                                                                                      </InArgument>
                                                                                    </If.Condition>
                                                                                    <If.Then>
                                                                                      <Assign>
                                                                                        <Assign.To>
                                                                                          <OutArgument x:TypeArguments="sd:PointF">
                                                                                            <mca:CSharpReference x:TypeArguments="sd:PointF">Coordenadas</mca:CSharpReference>
                                                                                          </OutArgument>
                                                                                        </Assign.To>
                                                                                        <Assign.Value>
                                                                                          <InArgument x:TypeArguments="sd:PointF">
                                                                                            <mca:CSharpValue x:TypeArguments="sd:PointF">new PointF(Single.Parse(RtaCave.Split(';')[0].Replace(".", ",")), Single.Parse(RtaCave.Split(';')[1].Replace(".", ",")))</mca:CSharpValue>
                                                                                          </InArgument>
                                                                                        </Assign.Value>
                                                                                      </Assign>
                                                                                    </If.Then>
                                                                                  </If>
                                                                                </Sequence>
                                                                              </Transition.Trigger>
                                                                              <Transition.To>
                                                                                <x:Reference>__ReferenceID4</x:Reference>
                                                                              </Transition.To>
                                                                              <Transition.Condition>
                                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">Math.Sqrt((Math.Pow(Coordenadas.X - Cruz.X, 2)) + Math.Pow(Coordenadas.Y - Cruz.Y, 2)) &lt; Cercania</mca:CSharpValue>
                                                                              </Transition.Condition>
                                                                            </Transition>
                                                                            <Transition Trigger="{x:Reference __ReferenceID5}" DisplayName="T1" To="{x:Reference __ReferenceID6}">
                                                                              <Transition.Condition>
                                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">!(Math.Sqrt((Math.Pow(Coordenadas.X - Cruz.X, 2)) + Math.Pow(Coordenadas.Y - Cruz.Y, 2)) &lt; Cercania)</mca:CSharpValue>
                                                                              </Transition.Condition>
                                                                            </Transition>
                                                                          </State.Transitions>
                                                                        </State>
                                                                      </Transition.To>
                                                                      <Transition.Action>
                                                                        <Sequence DisplayName="Cambiar Cruz">
                                                                          <WriteLine Text="hide_question" />
                                                                          <WriteLine>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpValue x:TypeArguments="x:String">"M{ \"x\":\""+Cruz.X+"\", \"y\":\""+Cruz.Y+"\" }"</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </WriteLine>
                                                                        </Sequence>
                                                                      </Transition.Action>
                                                                      <Transition.Condition>
                                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("1")</mca:CSharpValue>
                                                                      </Transition.Condition>
                                                                    </Transition>
                                                                  </State.Transitions>
                                                                  <State.Variables>
                                                                    <Variable x:TypeArguments="x:String" Name="variable1" />
                                                                    <Variable x:TypeArguments="x:Int32" Name="CruzX" />
                                                                    <Variable x:TypeArguments="x:Int32" Name="CruzY" />
                                                                  </State.Variables>
                                                                </State>
                                                              </Transition.To>
                                                              <Transition.Action>
                                                                <Sequence>
                                                                  <Sequence DisplayName="Salida">
                                                                    <Assign>
                                                                      <Assign.To>
                                                                        <OutArgument x:TypeArguments="x:String">
                                                                          <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                                        </OutArgument>
                                                                      </Assign.To>
                                                                      <Assign.Value>
                                                                        <InArgument x:TypeArguments="x:String">
                                                                          <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">"Selecciona;"+Cursor+
"\nX;"+BanderasCircunferencia.ElementAt(Cursor).X +
"\nY;"+BanderasCircunferencia.ElementAt(Cursor).Y +
"\nHoraSelecciona;"+DateTime.Now.ToString()</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </Assign.Value>
                                                                    </Assign>
                                                                    <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                                      <AddToCollection.Item>
                                                                        <InArgument x:TypeArguments="x:String">
                                                                          <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </AddToCollection.Item>
                                                                      <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                        <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </AddToCollection>
                                                                    <WriteLine>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </WriteLine>
                                                                  </Sequence>
                                                                  <Sequence DisplayName="Cambiar Cruz">
                                                                    <WriteLine>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"" + ColorBandera + "\" }"</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </WriteLine>
                                                                    <WriteLine>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">Mostrar180.Replace("true", "false")</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </WriteLine>
                                                                    <WriteLine Text="hide_question" />
                                                                    <Sequence DisplayName="Generar Cruz">
                                                                      <Sequence.Variables>
                                                                        <Variable x:TypeArguments="s:Random" Name="RandomX" />
                                                                        <Variable x:TypeArguments="s:Random" Name="RandomY" />
                                                                        <Variable x:TypeArguments="x:String" Name="variable2" />
                                                                        <Variable x:TypeArguments="x:Int32" Name="CruzX" />
                                                                        <Variable x:TypeArguments="x:Int32" Name="CruzY" />
                                                                      </Sequence.Variables>
                                                                      <Assign>
                                                                        <Assign.To>
                                                                          <OutArgument x:TypeArguments="s:Random">
                                                                            <mca:CSharpReference x:TypeArguments="s:Random">RandomX</mca:CSharpReference>
                                                                          </OutArgument>
                                                                        </Assign.To>
                                                                        <Assign.Value>
                                                                          <InArgument x:TypeArguments="s:Random">
                                                                            <mca:CSharpValue x:TypeArguments="s:Random">new Random()</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </Assign.Value>
                                                                      </Assign>
                                                                      <Assign>
                                                                        <Assign.To>
                                                                          <OutArgument x:TypeArguments="s:Random">
                                                                            <mca:CSharpReference x:TypeArguments="s:Random">RandomY</mca:CSharpReference>
                                                                          </OutArgument>
                                                                        </Assign.To>
                                                                        <Assign.Value>
                                                                          <InArgument x:TypeArguments="s:Random">
                                                                            <mca:CSharpValue x:TypeArguments="s:Random">new Random()</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </Assign.Value>
                                                                      </Assign>
                                                                      <Assign>
                                                                        <Assign.To>
                                                                          <OutArgument x:TypeArguments="x:Int32">
                                                                            <mca:CSharpReference x:TypeArguments="x:Int32">CruzX</mca:CSharpReference>
                                                                          </OutArgument>
                                                                        </Assign.To>
                                                                        <Assign.Value>
                                                                          <InArgument x:TypeArguments="x:Int32">
                                                                            <mca:CSharpValue x:TypeArguments="x:Int32">RandomX.Next(-13,13)</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </Assign.Value>
                                                                      </Assign>
                                                                      <Assign>
                                                                        <Assign.To>
                                                                          <OutArgument x:TypeArguments="x:Int32">
                                                                            <mca:CSharpReference x:TypeArguments="x:Int32">CruzY</mca:CSharpReference>
                                                                          </OutArgument>
                                                                        </Assign.To>
                                                                        <Assign.Value>
                                                                          <InArgument x:TypeArguments="x:Int32">
                                                                            <mca:CSharpValue x:TypeArguments="x:Int32">RandomY.Next(-13, 13)</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </Assign.Value>
                                                                      </Assign>
                                                                      <While>
                                                                        <While.Condition>
                                                                          <mca:CSharpValue x:TypeArguments="x:Boolean">(Math.Sqrt(Math.Pow(Cruz.X-CruzX,2)+Math.Pow(Cruz.Y-CruzY,2))&lt;Cercania) || (PosicionCruz.Contains(new PointF(CruzX,CruzY)))</mca:CSharpValue>
                                                                        </While.Condition>
                                                                        <Sequence>
                                                                          <Assign>
                                                                            <Assign.To>
                                                                              <OutArgument x:TypeArguments="x:Int32">
                                                                                <mca:CSharpReference x:TypeArguments="x:Int32">CruzX</mca:CSharpReference>
                                                                              </OutArgument>
                                                                            </Assign.To>
                                                                            <Assign.Value>
                                                                              <InArgument x:TypeArguments="x:Int32">
                                                                                <mca:CSharpValue x:TypeArguments="x:Int32">RandomX.Next(-13,13)</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </Assign.Value>
                                                                          </Assign>
                                                                          <Assign>
                                                                            <Assign.To>
                                                                              <OutArgument x:TypeArguments="x:Int32">
                                                                                <mca:CSharpReference x:TypeArguments="x:Int32">CruzY</mca:CSharpReference>
                                                                              </OutArgument>
                                                                            </Assign.To>
                                                                            <Assign.Value>
                                                                              <InArgument x:TypeArguments="x:Int32">
                                                                                <mca:CSharpValue x:TypeArguments="x:Int32">RandomY.Next(-13,13)</mca:CSharpValue>
                                                                              </InArgument>
                                                                            </Assign.Value>
                                                                          </Assign>
                                                                        </Sequence>
                                                                      </While>
                                                                      <AddToCollection x:TypeArguments="sd:PointF">
                                                                        <AddToCollection.Item>
                                                                          <InArgument x:TypeArguments="sd:PointF">
                                                                            <mca:CSharpValue x:TypeArguments="sd:PointF">Cruz</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </AddToCollection.Item>
                                                                        <InArgument x:TypeArguments="scg:ICollection(sd:PointF)">
                                                                          <mca:CSharpValue x:TypeArguments="scg:ICollection(sd:PointF)">PosicionCruz</mca:CSharpValue>
                                                                        </InArgument>
                                                                      </AddToCollection>
                                                                      <Assign>
                                                                        <Assign.To>
                                                                          <OutArgument x:TypeArguments="x:Single">
                                                                            <mca:CSharpReference x:TypeArguments="x:Single">Cruz.X</mca:CSharpReference>
                                                                          </OutArgument>
                                                                        </Assign.To>
                                                                        <Assign.Value>
                                                                          <InArgument x:TypeArguments="x:Single">
                                                                            <mca:CSharpValue x:TypeArguments="x:Single">CruzX</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </Assign.Value>
                                                                      </Assign>
                                                                      <Assign>
                                                                        <Assign.To>
                                                                          <OutArgument x:TypeArguments="x:Single">
                                                                            <mca:CSharpReference x:TypeArguments="x:Single">Cruz.Y</mca:CSharpReference>
                                                                          </OutArgument>
                                                                        </Assign.To>
                                                                        <Assign.Value>
                                                                          <InArgument x:TypeArguments="x:Single">
                                                                            <mca:CSharpValue x:TypeArguments="x:Single">CruzY</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </Assign.Value>
                                                                      </Assign>
                                                                      <Sequence DisplayName="Salida">
                                                                        <Assign>
                                                                          <Assign.To>
                                                                            <OutArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                                                            </OutArgument>
                                                                          </Assign.To>
                                                                          <Assign.Value>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpValue x:TypeArguments="x:String">"CruzX;"+CruzX+"\nCruzY;"+CruzY</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </Assign.Value>
                                                                        </Assign>
                                                                        <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                                                          <AddToCollection.Item>
                                                                            <InArgument x:TypeArguments="x:String">
                                                                              <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </AddToCollection.Item>
                                                                          <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                                                            <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </AddToCollection>
                                                                        <WriteLine>
                                                                          <InArgument x:TypeArguments="x:String">
                                                                            <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </WriteLine>
                                                                      </Sequence>
                                                                    </Sequence>
                                                                    <WriteLine>
                                                                      <InArgument x:TypeArguments="x:String">
                                                                        <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Terminar Experimento?\" }"</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </WriteLine>
                                                                  </Sequence>
                                                                </Sequence>
                                                              </Transition.Action>
                                                              <Transition.Condition>
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("2")</mca:CSharpValue>
                                                              </Transition.Condition>
                                                            </Transition>
                                                            <Transition Trigger="{x:Reference __ReferenceID7}" DisplayName="T2" To="{x:Reference __ReferenceID8}">
                                                              <Transition.Action>
                                                                <Sequence>
                                                                  <WriteLine>
                                                                    <InArgument x:TypeArguments="x:String">
                                                                      <mca:CSharpValue x:TypeArguments="x:String">"C{ \"id\":\"" + (int)(Cursor) + "\", \"color\":\"" + ColorBandera + "\" }"</mca:CSharpValue>
                                                                    </InArgument>
                                                                  </WriteLine>
                                                                  <If>
                                                                    <If.Condition>
                                                                      <InArgument x:TypeArguments="x:Boolean">
                                                                        <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("1")</mca:CSharpValue>
                                                                      </InArgument>
                                                                    </If.Condition>
                                                                    <If.Then>
                                                                      <Sequence>
                                                                        <Assign>
                                                                          <Assign.To>
                                                                            <OutArgument x:TypeArguments="x:Int32">
                                                                              <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                                            </OutArgument>
                                                                          </Assign.To>
                                                                          <Assign.Value>
                                                                            <InArgument x:TypeArguments="x:Int32">
                                                                              <mca:CSharpValue x:TypeArguments="x:Int32">(Cursor - 1) % BanderasCircunferencia.Count</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </Assign.Value>
                                                                        </Assign>
                                                                        <If>
                                                                          <If.Condition>
                                                                            <InArgument x:TypeArguments="x:Boolean">
                                                                              <mca:CSharpValue x:TypeArguments="x:Boolean">Cursor&lt;0</mca:CSharpValue>
                                                                            </InArgument>
                                                                          </If.Condition>
                                                                          <If.Then>
                                                                            <Assign>
                                                                              <Assign.To>
                                                                                <OutArgument x:TypeArguments="x:Int32">
                                                                                  <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                                                </OutArgument>
                                                                              </Assign.To>
                                                                              <Assign.Value>
                                                                                <InArgument x:TypeArguments="x:Int32">
                                                                                  <mca:CSharpValue x:TypeArguments="x:Int32">BanderasCircunferencia.Count-1</mca:CSharpValue>
                                                                                </InArgument>
                                                                              </Assign.Value>
                                                                            </Assign>
                                                                          </If.Then>
                                                                        </If>
                                                                      </Sequence>
                                                                    </If.Then>
                                                                    <If.Else>
                                                                      <Assign>
                                                                        <Assign.To>
                                                                          <OutArgument x:TypeArguments="x:Int32">
                                                                            <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                                          </OutArgument>
                                                                        </Assign.To>
                                                                        <Assign.Value>
                                                                          <InArgument x:TypeArguments="x:Int32">
                                                                            <mca:CSharpValue x:TypeArguments="x:Int32">(Cursor + 1) % BanderasCircunferencia.Count</mca:CSharpValue>
                                                                          </InArgument>
                                                                        </Assign.Value>
                                                                      </Assign>
                                                                    </If.Else>
                                                                  </If>
                                                                </Sequence>
                                                              </Transition.Action>
                                                              <Transition.Condition>
                                                                <mca:CSharpValue x:TypeArguments="x:Boolean">RtaCave.Equals("1") || RtaCave.Equals("3")</mca:CSharpValue>
                                                              </Transition.Condition>
                                                            </Transition>
                                                          </State.Transitions>
                                                        </State>
                                                      </Transition.To>
                                                    </Transition>
                                                  </State.Transitions>
                                                </State>
                                              </Transition.To>
                                              <Transition.Action>
                                                <Sequence>
                                                  <Assign>
                                                    <Assign.To>
                                                      <OutArgument x:TypeArguments="x:Int32">
                                                        <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                                      </OutArgument>
                                                    </Assign.To>
                                                    <Assign.Value>
                                                      <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                                    </Assign.Value>
                                                  </Assign>
                                                  <WriteLine DisplayName="WriteLine">
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Escucha la consigna\" }"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                  <Delay>
                                                    <InArgument x:TypeArguments="x:TimeSpan">
                                                      <mca:CSharpValue x:TypeArguments="x:TimeSpan">TimeSpan.FromSeconds(4)</mca:CSharpValue>
                                                    </InArgument>
                                                  </Delay>
                                                  <WriteLine Text="hide_question" />
                                                  <WriteLine DisplayName="WriteLine">
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"X(izq) Y(Sel) B(der)\" }"</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                  <WriteLine DisplayName="WriteLine">
                                                    <InArgument x:TypeArguments="x:String">
                                                      <mca:CSharpValue x:TypeArguments="x:String">Mostrar180</mca:CSharpValue>
                                                    </InArgument>
                                                  </WriteLine>
                                                </Sequence>
                                              </Transition.Action>
                                              <Transition.Condition>
                                                <mca:CSharpValue x:TypeArguments="x:Boolean">(BanderasAparecidas.Count().CompareTo(Protocolo.Length) &lt; 0 &amp;&amp; !(Protocolo[BanderasAparecidas.Count()].Equals(1)) &amp;&amp; !(Protocolo[BanderasAparecidas.Count()].Equals(3))) || !(BanderasAparecidas.Count().CompareTo(Protocolo.Length) &lt;0)</mca:CSharpValue>
                                              </Transition.Condition>
                                            </Transition>
                                          </State.Transitions>
                                        </State>
                                      </Transition.To>
                                      <Transition.Action>
                                        <Sequence>
                                          <Assign>
                                            <Assign.To>
                                              <OutArgument x:TypeArguments="x:Int32">
                                                <mca:CSharpReference x:TypeArguments="x:Int32">Cursor</mca:CSharpReference>
                                              </OutArgument>
                                            </Assign.To>
                                            <Assign.Value>
                                              <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                            </Assign.Value>
                                          </Assign>
                                          <WriteLine DisplayName="WriteLine">
                                            <InArgument x:TypeArguments="x:String">
                                              <mca:CSharpValue x:TypeArguments="x:String">"Q{ \"text\":\"Marca la bandera que recolectaste.\" }"</mca:CSharpValue>
                                            </InArgument>
                                          </WriteLine>
                                          <WriteLine>
                                            <InArgument x:TypeArguments="x:String">
                                              <mca:CSharpValue x:TypeArguments="x:String">Mostrar180</mca:CSharpValue>
                                            </InArgument>
                                          </WriteLine>
                                        </Sequence>
                                      </Transition.Action>
                                      <Transition.Condition>
                                        <mca:CSharpValue x:TypeArguments="x:Boolean">Math.Sqrt((Math.Pow(Coordenadas.X - Cruz.X, 2)) + Math.Pow(Coordenadas.Y - Cruz.Y, 2)) &lt; Cercania</mca:CSharpValue>
                                      </Transition.Condition>
                                    </Transition>
                                  </State.Transitions>
                                </State>
                              </Transition.To>
                              <Transition.Action>
                                <Sequence>
                                  <WriteLine>
                                    <InArgument x:TypeArguments="x:String">
                                      <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(BanderaRandom) + "\", \"visible\":\"false\" }"</mca:CSharpValue>
                                    </InArgument>
                                  </WriteLine>
                                  <Sequence DisplayName="Salida">
                                    <Assign>
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:String">
                                          <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                        </OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">"Hora Captura;"+DateTime.Now.ToString()</mca:CSharpValue>
                                        </InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                      <AddToCollection.Item>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                        </InArgument>
                                      </AddToCollection.Item>
                                      <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                        <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                                      </InArgument>
                                    </AddToCollection>
                                    <WriteLine>
                                      <InArgument x:TypeArguments="x:String">
                                        <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                      </InArgument>
                                    </WriteLine>
                                  </Sequence>
                                  <Sequence DisplayName="Salida">
                                    <Assign>
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:String">
                                          <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                        </OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">DateTime.Now.ToString() + ";" + Coordenadas.X + ";" + Coordenadas.Y + ";" + BanderasCircunferencia[BanderaRandom].X + ";" + BanderasCircunferencia[BanderaRandom].Y + ";" + BanderaRandom + ";CAP"</mca:CSharpValue>
                                        </InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                                      <AddToCollection.Item>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                        </InArgument>
                                      </AddToCollection.Item>
                                      <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                        <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Recorrido</mca:CSharpValue>
                                      </InArgument>
                                    </AddToCollection>
                                    <WriteLine>
                                      <InArgument x:TypeArguments="x:String">
                                        <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                      </InArgument>
                                    </WriteLine>
                                  </Sequence>
                                </Sequence>
                              </Transition.Action>
                              <Transition.Condition>
                                <mca:CSharpValue x:TypeArguments="x:Boolean">Math.Sqrt((Math.Pow(Coordenadas.X - BanderasCircunferencia[BanderaRandom].X, 2)) + Math.Pow(Coordenadas.Y - BanderasCircunferencia[BanderaRandom].Y, 2)) &lt; Cercania</mca:CSharpValue>
                              </Transition.Condition>
                            </Transition>
                            <Transition Trigger="{x:Reference __ReferenceID9}" DisplayName="No Caprtura" To="{x:Reference __ReferenceID10}">
                              <Transition.Condition>
                                <mca:CSharpValue x:TypeArguments="x:Boolean">!(Math.Sqrt((Math.Pow(Coordenadas.X - BanderasCircunferencia[BanderaRandom].X, 2)) + Math.Pow(Coordenadas.Y - BanderasCircunferencia[BanderaRandom].Y, 2)) &lt; Cercania)</mca:CSharpValue>
                              </Transition.Condition>
                            </Transition>
                          </State.Transitions>
                        </State>
                      </Transition.To>
                      <Transition.Action>
                        <Sequence DisplayName="GenerarBanderaRandom">
                          <Sequence.Variables>
                            <Variable x:TypeArguments="s:Random" Name="Random" />
                          </Sequence.Variables>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="s:Random">
                                <mca:CSharpReference x:TypeArguments="s:Random">Random</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="s:Random">
                                <mca:CSharpValue x:TypeArguments="s:Random">new Random()</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <Assign>
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Int32">
                                <mca:CSharpReference x:TypeArguments="x:Int32">BanderaRandom</mca:CSharpReference>
                              </OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Int32">
                                <mca:CSharpValue x:TypeArguments="x:Int32">Random.Next(0,BanderasCircunferencia.Count)</mca:CSharpValue>
                              </InArgument>
                            </Assign.Value>
                          </Assign>
                          <While>
                            <While.Condition>
                              <mca:CSharpValue x:TypeArguments="x:Boolean">BanderasAparecidas.Contains(BanderaRandom)</mca:CSharpValue>
                            </While.Condition>
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpReference x:TypeArguments="x:Int32">BanderaRandom</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpValue x:TypeArguments="x:Int32">Random.Next(0,TotalBanderas)</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                          </While>
                          <AddToCollection x:TypeArguments="x:Int32">
                            <AddToCollection.Item>
                              <InArgument x:TypeArguments="x:Int32">
                                <mca:CSharpValue x:TypeArguments="x:Int32">BanderaRandom</mca:CSharpValue>
                              </InArgument>
                            </AddToCollection.Item>
                            <InArgument x:TypeArguments="scg:ICollection(x:Int32)">
                              <mca:CSharpValue x:TypeArguments="scg:ICollection(x:Int32)">BanderasAparecidas</mca:CSharpValue>
                            </InArgument>
                          </AddToCollection>
                          <WriteLine>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">"H{ \"id\":\"" + (int)(BanderaRandom) + "\", \"visible\":\"true\" }"</mca:CSharpValue>
                            </InArgument>
                          </WriteLine>
                          <Sequence DisplayName="Salida">
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">
                                  <mca:CSharpReference x:TypeArguments="x:String">Mensaje</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">
                                  <mca:CSharpValue x:TypeArguments="x:String">"Hora;"+DateTime.Now.ToString()+"\nBandera;" + BanderaRandom + "\nX;" + BanderasCircunferencia.ElementAt(BanderaRandom).X + "\nY;" + BanderasCircunferencia.ElementAt(BanderaRandom).Y</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                              <AddToCollection.Item>
                                <InArgument x:TypeArguments="x:String">
                                  <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                                </InArgument>
                              </AddToCollection.Item>
                              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                              </InArgument>
                            </AddToCollection>
                            <WriteLine>
                              <InArgument x:TypeArguments="x:String">
                                <mca:CSharpValue x:TypeArguments="x:String">Mensaje</mca:CSharpValue>
                              </InArgument>
                            </WriteLine>
                          </Sequence>
                        </Sequence>
                      </Transition.Action>
                      <Transition.Condition>
                        <mca:CSharpValue x:TypeArguments="x:Boolean">Continuar&gt;0</mca:CSharpValue>
                      </Transition.Condition>
                    </Transition>
                    <Transition Trigger="{x:Reference __ReferenceID11}" DisplayName="T3" To="{x:Reference __ReferenceID12}">
                      <Transition.Condition>
                        <mca:CSharpValue x:TypeArguments="x:Boolean">!(Continuar &gt; 0)</mca:CSharpValue>
                      </Transition.Condition>
                    </Transition>
                  </State.Transitions>
                </State>
              </Transition.To>
              <Transition.Action>
                <Sequence>
                  <WriteLine>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">Agregar180</mca:CSharpValue>
                    </InArgument>
                  </WriteLine>
                  <WriteLine>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">"L{ \"id\":\"null\" }"</mca:CSharpValue>
                    </InArgument>
                  </WriteLine>
                  <AddToCollection x:TypeArguments="x:String" DisplayName="AddToCollection&lt;String&gt;">
                    <AddToCollection.Item>
                      <InArgument x:TypeArguments="x:String">
                        <mca:CSharpValue x:TypeArguments="x:String">"Inicia: " + DateTime.Now.ToString()</mca:CSharpValue>
                      </InArgument>
                    </AddToCollection.Item>
                    <InArgument x:TypeArguments="scg:ICollection(x:String)">
                      <mca:CSharpValue x:TypeArguments="scg:ICollection(x:String)">Reporte</mca:CSharpValue>
                    </InArgument>
                  </AddToCollection>
                </Sequence>
              </Transition.Action>
            </Transition>
          </State.Transitions>
        </State>
      </StateMachine.InitialState>
      <x:Reference>__ReferenceID13</x:Reference>
      <x:Reference>__ReferenceID4</x:Reference>
      <x:Reference>__ReferenceID10</x:Reference>
      <x:Reference>__ReferenceID12</x:Reference>
      <x:Reference>__ReferenceID8</x:Reference>
      <x:Reference>__ReferenceID3</x:Reference>
      <x:Reference>__ReferenceID0</x:Reference>
      <x:Reference>__ReferenceID6</x:Reference>
      <x:Reference>__ReferenceID14</x:Reference>
      <x:Reference>__ReferenceID15</x:Reference>
      <StateMachine.Variables>
        <Variable x:TypeArguments="sd:PointF" Name="Cruz" />
        <Variable x:TypeArguments="x:String" Name="RtaCave" />
        <Variable x:TypeArguments="sd:PointF" Name="Coordenadas" />
        <Variable x:TypeArguments="x:Int32" Name="TotalBanderas" />
        <Variable x:TypeArguments="scg:List(x:Int32)" Name="BanderasAparecidas" />
        <Variable x:TypeArguments="x:Int32" Name="Continuar" />
        <Variable x:TypeArguments="x:Int32" Name="Cercania" />
        <Variable x:TypeArguments="x:Int32" Name="Cursor" />
        <Variable x:TypeArguments="scg:List(sd:PointF)" Name="PosicionCruz" />
        <Variable x:TypeArguments="x:Int32" Name="BanderaRandom" />
        <Variable x:TypeArguments="x:String" Name="Mensaje" />
      </StateMachine.Variables>
      <sads:DebugSymbol.Symbol>d3BDOlxVc2Vyc1xEZWxsUGxhZGVtYVxEZXNrdG9wXE51ZXZhIGNhcnBldGEgKDIpXFZGaW5hbFxXRkZsYWdDb2xsZWN0b3JcRmxhZ0NvbGxlY3RvclxQcmVUcmFpbmluZ1xQcmVUcmFpbmluZy54YW1s8QI7A90KEgIBAT0HwwoPAwGwH8EBD6cKFwMBwBjGAhe/CR8DAbEUkgVHsQVPAwG1E8MEN6MIPwMBwgnuBD+HBkcDAeUHiQMf8AgnAwGTBcEFR/EFTwMBggTUAyfRCC8DAZUBlwQvpwg3AgECPwucARYDAfMgoQEPvgEaAwGSIKoKD78KGgMBsh/DARPzAR4DAe8d9gEToQIeAwHEHKYCF8MCIgMB4xueCheeCmQDAcwbwgkXmwoiAwHZGKMKF6MKaQMBwhjIAhvkAiYDAckX6QIfhgMqAwHoFrYJH7YJhAIDAdEW8wgfswkqAwHKFLsJH7sJhwIDAbMUlAVLrwVWAwG3E8UEO8kERwMBnRPOBD/rBEoDAbwS1wc/1weRAQMBpRKKBj/UB0oDAbILnwg/nwioAQMBmwvcBz+cCEoDAcQJ8gRHjwVSAwHVCLcFR7cFmQEDAbsItAVHtAWYAQMBuQi8BUe8BboBAwGfCP4FR/4FmQEDAYUI9AVH+wVSAwHnB4sDI6cDLgMB7gasAyfJAzIDAY0GzwMnzwPNAQMB9gXsCCfsCMoBAwHfBdQIJ+kIMgMBlQXFBU/iBVoDAbIE6AVP6AXyAQMBmwTtBU/tBfUBAwGEBNYDK/IDNgMBiwP3Ay+UBDoDAaoCzQgvzQjsAgMBkwKqCC/KCDoDAZcBmQQznwQ+AgF8ogQzvgQ+AgEFQA1LFgMBkSNMDVcWAwHiIlgNYRYDAckiYg1rFgMBsCJsDXcWAwGBIngNgwEWAwHSIYQBDY8BFgMBoyGQAQ2bARYDAfQgogERqAEkAwHaIKkBEb0BFgMBkyCrChGvCh0DAfofsAoRtAodAwHiH7UKEb4KIwMBsx/EARXhASADAbke4gEV8gEgAwHwHfcBFYMCIAMBvB2EAhWgAiADAcUcpwIZrQIsAwGrHK4CGcICHgMB5BvGCRnRCSIDAZsb0gkZ3QkiAwHqGt4JGe4JIQMBoBrvCRn4CSsDAe8Z+QkZ/QklAwHWGf4JGZoKJAMB2hjJAh3UAiYDAZEY1QId3gIvAwHiF98CHeMCKQMByhfqAiHwAjQDAbAX8QIhhQMmAwHpFvQIIfgILQMBuRb5CCGVCSwDAcIVlgkhsgksAwHLFJUFTZkFWQMBmRSaBU2jBV8DAeoTpAVNqAVZAwHSE6kFTa0FVQMBuhOuBU2uBZ4BAwG4E8cEP8cEygEDAZ4TzwRB1QRUAwGEE9YEQeoERgMBvRKLBkGqBkwDAa4RqwZB0wdMAwGzC90HQeEHTQMBgwviB0GbCEYDAcUJ8wRJ+QRcAwGmCfoESY4FTgMB1gi0BYYBtAWVAQMBugj1BUn1BZkBAwGDCPYFSfoFVQMB6AeMAyWXAy4DAbYHmAMloQM3AwGHB6IDJaYDMQMB7watAymzAzwDAdUGtAMpyAMuAwGOBtUIKd4IMgMBxgXfCCnjCDUDAa4F5Agp6Ag1AwGWBcYFUcwFZAMB+gTNBVHhBVYDAbME1wMt4gM2AwHTA+MDLewDPwMBpAPtAy3xAzkDAYwD+AMx/gNEAwHyAv8DMZMENgMBqwKrCDG0CDoDAfoBtQgxuQg9AwHiAboIMb4IOQMBygG/CDG/CIIBAwHIAcAIMcQIPQMBsAHFCDHJCD0DAZgBmgQ1ngRBAgF9owQ1rgQ+AgFNrwQ1uARHAgEeuQQ1vQRBAgEGSBNIdAMBqSNDE0NqAwGSI1QTVHQDAfoiTxNPbAMB4yJfN184AwHhIlsTW2ADAcoiaTdpOAMByCJlE2VhAwGxInQTdGEDAZkibxNvXgMBgiKAAROAAXQDAeohexN7cAMB0yGMAROMAV4DAbshhwEThwFlAwGkIZgBE5gBcQMBjCGTAROTAXQDAfUgogEwogE5AwHyIKUBF6UBZAMB2yCsAResAXYDAZQgsAEVuwEeAwGrIK0KFa0KXQMB+x+yChWyCmkDAeMfvAoVvAprAwHLH7gKF7gKeQMBtB/FARfRASADAYEf0gEX2wEpAwHSHtwBF+ABIwMBuh7jARfnASMDAaEe6AEX7AEfAwGJHu0BF/EBIwMB8R34ARf8ASMDAdcd/QEXgQIfAwG/HYICF4ICaAMBvR2FAheQAiADAY0dkQIXmgIpAwHeHJsCF58CIwMBxhynAjinAkEDAcMcqgIfqgJsAwGsHLECH7ECfgMB5Ru1Ah3AAiYDAfwbzgkfzglpAwG0G8kJH8kJawMBnBvaCR/aCYcBAwGDG9UJH9UJcQMB6xriCRvtCSQDAbka4Akd4AmGAQMBoRr2CR32CX0DAYga8gkf8glpAwHwGfsJHfsJnwEDAdcZ/wkbigokAwGlGYsKG5QKLQMB9BiVChuZCicDAdsY0QIj0QKyAQMBqRjMAiPMAnADAZIY3AIh3AJ5AwH6F9gCI9gCaAMB4xfhAiHhAmYDAcsX6gJA6gJJAwHIF+0CJ+0CdAMBsRf0Aif0AoYBAwHqFvgCJYMDLgMBgRf2CCX2CKgBAwG6FvoII4UJLAMBihaGCSOPCTUDAdsVkAkjlAkvAwHDFZcJI6IJLAMBkxWjCSOsCTUDAeQUrQkjsQkvAwHMFJcFUZcFtgEDAZoUoQVRoQWpAQMBghSdBVOdBdcBAwHrE6YFUaYF7wEDAdMTqwVRqwWoAQMBuxOuBYwBrgWbAQMBuRPPBGDPBGkDAZwT0gRH0gSUAQMBhRPZBEfZBKYBAwG+Et0ERegETgMB1RKMBkOaBkwDAfYRmwZDpAZVAwHHEaUGQ6kGTwMBrxGsBkOwBk8DAZYRsQZDtQZPAwH+ELYGQ7YGlAEDAfwQtwZDzQdOAwHMC84HQ9IHTwMBtAvfB0XfB84BAwGEC+UHR+UHmQEDAcYJ6QdFiwhQAwGMCo4IRZkITgMB3QnzBGjzBHEDAcEJ9gRP9gScAQMBpwn9BE/9BK4BAwHXCIEFTYwFVgMB8Qj1BYcB9QWWAQMBhAj4BU34BbwBAwHpB5QDK5QDyQEDAc4HjwMrjwN4AwG3B58DKZ8DgQEDAZ8HmwMrmwNwAwGIB6QDKaQDbgMB8AatA0itA1EDAe0GsAMvsAN8AwHWBrcDL7cDjgEDAY8GuwMtxgM2AwGmBtwIU9wIVAMB3gXYCC/YCHoDAccF4Qgt4QihAQMBrwXmCC3mCHUDAZcFxgVwxgV5AwGSBckFV8kFpAEDAfsE0AVX0AW2AQMBtATUBVXfBV4DAcsE3wMz3wO9AQMB6wPaAzPaA4ABAwHUA+oDMeoDiQEDAbwD5gMz5gN4AwGlA+8DMe8DdgMBjQP4A1D4A1kDAYoD+wM3+wOEAQMB8wKCBDeCBJYBAwGsAoYENZEEPgMBwwKyCFuyCFwDAZICrgg3rgiCAQMB+wG3CDW3CJoBAwHjAbwINbwIjAEDAcsBvwhwvwh/AwHJAcIINcIImwEDAbEBxwg1xwh9AwGZAZwEOZwEsgECAX6rBDurBMUBAgFlpgQ7pgSIAQIBTrYEObYEkQECATayBDuyBIABAgEfuwQ5uwR+AgEHuAEbuAHSAQMBwyCzARuzAW0DAawgzQEdzgFPAwGZH8gBHcgBagMBgh/ZARvZAXMDAeoe1QEd1QFiAwHTHt4BG94BYAMBux7lARvlAXIDAaIe6gEb6gFzAwGKHu8BG+8BcwMB8h36ARv6AZ8BAwHYHf8BG/8BcgMBwB2CAlaCAmUDAb4djQIdjQKAAQMBpR2IAh2IAmoDAY4dmAIbmAJxAwH2HJQCHZQCYgMB3xydAhudAmADAcccvQIjvQLaAQMBlBy4AiO4AnUDAf0b6gkh6gl6AwHSGuUJIeUJcwMBuhqHCiGHCpUCAwG+GYIKIYIKbgMBphmSCh+SCnUDAY0ZjgohjgpmAwH1GJcKH5cKZAMB3BiAAyuAA+IBAwGZF/sCK/sCfQMBgheCCSmCCY4BAwGiFv0IKf0IdgMBixaNCSeNCX0DAfMViQkpiQluAwHcFZIJJ5IJbAMBxBWfCSmfCakCAwGrFZoJKZoJdgMBlBWqCSeqCX8DAfwUpgkppgluAwHlFK8JJ68JbAMBzRTlBEvlBIICAwHtEuAES+AEnQEDAdYSlAZJlwY+AwGOEo8GSY8GlgEDAfcRogZHogadAQMB3xGeBkmeBo4BAwHIEacGR6cGjAEDAbARrgZHrgbQAQMBlxGzBkezBqgBAwH/ELYGggG2BpEBAwH9EL8GRcoGTgMBwxDLBkXWBk4DAYoQ1wZF4gZOAwHRD+MGRe4GTgMBmA/vBkWNB00DAYgOjgdFlwdXAwHPDZgHRaMHTgMBlg2kB0WvB04DAd0MsAdFzAdQAwHNC9AHR9AHrgEDAbUL6gdH9QdQAwHUCvYHR4oITAMBjQqWCEuWCLMBAwH1CZEIS5EIlgEDAd4JiQVTiQWKAgMBjAmEBVOEBaUBAwHyCMMDM8MD6gEDAb4GvgMzvgOFAQMBpwbcBVvcBZICAwHjBNcFW9cFrQEDAcwEjgQ7jgTyAQMB2wKJBDuJBI0BAwHEAscGS8cGlQEDAeAQwgZLwgaYAQMBxBDTBkvTBpUBAwGnEM4GS84GmAEDAYsQ3wZL3wacAQMB7g/aBkvaBpUBAwHSD+sGS+sGnQEDAbUP5gZL5gaVAQMBmQ/zBkeMB1IDAaUO8QZJ8QaGAgMBiQ6VB0mVB6UBAwHsDZEHS5EHjgEDAdANoAdLoAeOAQMBsw2bB0ubB5cBAwGXDawHS6wHjgEDAfoMpwdLpweXAQMB3gyxB0e8B1ADAaQMvQdHxgdZAwHrC8cHR8sHUwMBzgvyB03yB7UBAwHsCu0HTe0HmAEDAdUK+QdN+QeXAQMBjgr9B0uICFQDAaUK9AZJ/wZSAwHfDoAHSYsHUgMBpg65B025B6oBAwHBDLQHTbQHmgEDAaUMxAdLxAehAQMBiAzAB03AB5IBAwHsC8kHS8kHkAEDAc8LhQhRhQisAQMBvQqACFGACJwBAwGmCvwGT/wGoAEDAfwO9wZP9waZAQMB4A6IB0+IB6ABAwHDDoMHT4MHmQEDAacO</sads:DebugSymbol.Symbol>
    </StateMachine>
  </local:PreTraining.Implementation>
</local:PreTraining>